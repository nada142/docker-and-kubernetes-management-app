<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Containers List</title>
    <meta
      content="width=device-width, initial-scale=1.0, shrink-to-fit=no"
      name="viewport"
    />
    <link
      rel="icon"
      href="../assets/img/dockube3.png"
      type="image/x-icon"
    />
    <!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.27/dist/sweetalert2.min.css">
<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.27/dist/sweetalert2.all.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism-okaidia.min.css" rel="stylesheet" />
<link rel="stylesheet" href="../assets/css/container.css">
    <!-- Fonts and icons -->
    <script src="../assets/js/plugin/webfont/webfont.min.js"></script>
    <script>
      WebFont.load({
        google: { families: ["Public Sans:300,400,500,600,700"] },
        custom: {
          families: [
            "Font Awesome 5 Solid",
            "Font Awesome 5 Regular",
            "Font Awesome 5 Brands",
            "simple-line-icons",
          ],
          urls: ["../assets/css/fonts.min.css"],
        },
        active: function () {
          sessionStorage.fonts = true;
        },
      });
    </script>

    <!-- CSS Files -->
    <link rel="stylesheet" href="../assets/css/bootstrap.min.css" />
    <link rel="stylesheet" href="../assets/css/plugins.min.css" />
    <link rel="stylesheet" href="../assets/css/kaiadmin.min.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

    <!-- CSS Just for demo purpose, don't include it in your project -->
    <link rel="stylesheet" href="../assets/css/demo.css" />
  </head>
  <body>
    <div class="wrapper">
      <!-- Sidebar -->
      <div class="sidebar" data-background-color="dark">
        <div class="sidebar-logo">
          <!-- Logo Header -->
          <div class="logo-header" data-background-color="dark">
			<a href="/" class="logo" style="display: flex; align-items: center;">
                <img
                  src="assets/img/dockube3.png"
                  alt="navbar brand"
                  class="navbar-brand"
                  height="40"
                />
                <span style="margin-left: 8px; font-size: 1.2em; font-weight: bold; color: aliceblue;">Dockube Pilot</span>
              </a>
            <div class="nav-toggle">
              <button class="btn btn-toggle toggle-sidebar">
                <i class="gg-menu-right"></i>
              </button>
              <button class="btn btn-toggle sidenav-toggler">
                <i class="gg-menu-left"></i>
              </button>
            </div>
            <button class="topbar-toggler more">
              <i class="gg-more-vertical-alt"></i>
            </button>
          </div>
          <!-- End Logo Header -->
        </div>
        <div class="sidebar-wrapper scrollbar scrollbar-inner">
          <div class="sidebar-content">
            <ul class="nav nav-secondary">
              <li class="nav-item">
                <a href="/" aria-expanded="false">
                  <i class="fas fa-tachometer-alt"></i> <!-- Dashboard icon -->
                  <p>Dashboard</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/dockerRegistries">
                  <i class="fas fa-warehouse"></i> <!-- Registry icon -->
                  <p>Docker Registries</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/dockerfile_list">
                  <i class="fas fa-file-code"></i> <!-- Code file icon for Dockerfile -->
                  <p>Dockerfile</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/dockerimg">
                  <i class="fas fa-images"></i> <!-- Images icon -->
                  <p>Docker Images</p>
                </a>
              </li>
              <li class="nav-item active">
                <a href="/dockercontainers">
                  <i class="fas fa-box"></i> <!-- Box icon for containers -->
                  <p>Docker Containers</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/volumes">
                  <i class="fas fa-database"></i> <!-- Database icon for Volumes -->
                  <p>Volumes</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="/compose">
                  <i class="fas fa-cubes"></i> <!-- Stacked cubes for Compose -->
                  <p>Docker Compose</p>
                </a>
              </li>
              <li class="nav-item">
                <a href="swarm_list">
                    <i class="fas fa-project-diagram"></i> <!-- Stacked cubes for Compose -->
                  <p>Docker Swarm</p>
                </a>
              </li>
              <li class="nav-item">
                <a data-bs-toggle="collapse" href="#kubernetesMenu" aria-expanded="false">
                    <i class="fas fa-dharmachakra"></i>
                    <p>Kubernetes</p>
                    <span class="caret"></span>
                </a>
                <div class="collapse" id="kubernetesMenu">
                    <ul class="nav nav-collapse">
                        <li>
                            <a href="/kubernetes/cluster">
                                <span class="sub-item">Cluster Setup</span>
                            </a>
                        </li>
                        <li>
                            <a href="/kubernetes/nodes">
                                <span class="sub-item">Nodes</span>
                            </a>
                        </li>
                        <li>
                            <a href="/kubernetes/deployments">
                                <span class="sub-item">Deployments</span>
                            </a>
                        </li>
                        <li>
                          <a href="/kubernetes/statefulsets">
                              <span class="sub-item">StatefulSets</span>
                          </a>
                      </li>
                        <li>
                            <a href="/kubernetes/services">
                                <span class="sub-item">Services</span>
                            </a>
                        </li>
                        <li>
                            <a href="/kubernetes/pods">
                                <span class="sub-item">Pods</span>
                            </a>
                        </li>
                        <li>
                            <a href="/kubernetes/pvcs">
                                <span class="sub-item">Storage</span>
                            </a>
                        </li>
                        <li>
                          <a href="/kubernetes/configs">
                              <span class="sub-item">ConfigMaps && Secrets</span>
                          </a>
                      </li>
                        <li>
                            <a href="/kubernetes/namespaces">
                                <span class="sub-item">Namespaces</span>
                            </a>
                        </li>
                         <li>
                <a href="/kubernetes/ingresses">
                    <span class="sub-item">Ingresses</span>
                </a>
            </li>
                    </ul>
                </div>
            </li>
            <li class="nav-item">
              <a href="/cicd_integration">
                <i class="fas fa-sync-alt"></i>
                <p>CI CD</p>
              </a>
            </li>
              <li class="nav-item">
                <a data-bs-toggle="collapse" href="#" onclick="logout()">
                  <i class="fas fa-sign-out-alt"></i> <!-- Logout icon -->
                  <p>Logout</p>
                </a>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <!-- End Sidebar -->

      <div class="main-panel">
        <div class="main-header">
          <div class="main-header-logo">
            <!-- Logo Header -->
            <div class="logo-header" data-background-color="dark">
              <a href="/" class="logo" style="display: flex; align-items: center;">
                <img
                  src="assets/img/dockube3.png"
                  alt="navbar brand"
                  class="navbar-brand"
                  height="20"
                />
                <span style="margin-left: 8px; font-size: 1.2em; font-weight: bold; color: aliceblue;">Dockube Pilot</span>
              </a>
              <div class="nav-toggle">
                <button class="btn btn-toggle toggle-sidebar">
                  <i class="gg-menu-right"></i>
                </button>
                <button class="btn btn-toggle sidenav-toggler">
                  <i class="gg-menu-left"></i>
                </button>
              </div>
              <button class="topbar-toggler more">
                <i class="gg-more-vertical-alt"></i>
              </button>
            </div>
            <!-- End Logo Header -->
          </div>
          <!-- Navbar Header -->
          <nav
          class="navbar navbar-header navbar-header-transparent navbar-expand-lg border-bottom"
        >
          <div class="container-fluid">
            <nav
              class="navbar navbar-header-left navbar-expand-lg navbar-form nav-search p-0 d-none d-lg-flex"
            >
              <div class="input-group">
                <div class="input-group-prepend">
                  <button type="submit" onclick="recherche()" class="btn btn-search pe-1">

                    <i class="fa fa-search search-icon"></i>
                  </button>
                </div>
                <input type="text" name="table_search" id="myInput" onkeyup="recherche()" class="form-control" placeholder="Search">

                
              
              </div>
            </nav>

            <ul class="navbar-nav topbar-nav ms-md-auto align-items-center">
              <li class="nav-item topbar-user dropdown hidden-caret">
                <a
                  class="dropdown-toggle profile-pic"
                  data-bs-toggle="dropdown"
                  href="/profile"
                  aria-expanded="false"
                >
                
                  
                  <span class="profile-username">
                    <span class="op-7">Hi,</span>
                    <span class="fw-bold">Hizrian</span>
                  </span>
                </a>
                <ul class="dropdown-menu dropdown-user animated fadeIn">
                  <div class="dropdown-user-scroll scrollbar-outer">
                    <li>
                      <div class="user-box">
                        <div class="avatar-lg">
                          <img
                            src="assets/img/profile.jpg"
                            alt="image profile"
                            class="avatar-img rounded"
                          />
                        </div>
                        <div class="u-text">
                          <h4>Hizrian</h4>
                          <p class="text-muted">hello@example.com</p>
                          <a
                            href="/profile"
                            class="action-btn btn-blue2 btn-sm"
                            >Update Profile</a
                          >
                        </div>
                      </div>
                    </li>
                    <li>
                      <div class="dropdown-divider"></div>
                     
                      <a class="dropdown-item" href="#" onclick="logout()">Logout</a>
                    </li>
                  </div>
                </ul>
              </li>
            </ul>
          </div>
        </nav>
          <script>
            document.addEventListener("DOMContentLoaded", function() {
  var user = JSON.parse(localStorage.getItem("user"));
  if (user) {
      document.querySelector(".profile-username .fw-bold").textContent = user.username;
      document.querySelector(".u-text h4").textContent = user.username;
      document.querySelector(".u-text .text-muted").textContent = user.email;
  }
});
          </script>
          <!-- End Navbar -->
        </div>
          <div class="container">
              <div class="page-inner">
                  <div class="page-header">
                    <h2 class="text-center">Docker Containers
                      <span class="help-icon" data-tooltip="Running instances of your images">
                        <i class="fas fa-info-circle"></i>
                      </span>
                    </h2>
                    </div>
                  <div class="input-group mb-3">
                    <input type="text" id="searchInput" class="form-control" placeholder="Search Containers..." onkeyup="filterCards()">                  </div>
                  <div class="add-button">
                    <button class="action-btn btn-pastel-docker-blue" data-bs-toggle="modal" data-bs-target="#createContainerModal">
                      <i class="fas fa-plus"></i> Add New Container
                      <span class="help-icon" data-tooltip="Launch a new instance from an image">
                        <i class="fas fa-info-circle"></i>
                      </span>
                    
                    </button>
                </div>
                <div id="containersContainer" class="row">
                </div>
              </div>
          </div>
      </div>
 
       
      
      
      <div id="chatbot-container">
        <!-- Chatbot Toggle Button (Circle with Logo) -->
        <div id="chatbot-toggle">
            <img src="../assets/img/dockube3.png" alt="Chatbot Logo" width="50" height="50">
        </div>
      
        <!-- Chatbot Interface (Hidden by Default) -->
       
      <div id="chatbot-interface" style="display: none;">
        <!-- Chat Header -->
        <div id="chat-header">
            <strong>
                <img src="../assets/img/dockube3.png" alt="Logo">
                Docker & Kubernetes Assistant
            </strong>
            <button id="chat-close">×</button>
        </div>
      
        <!-- Chat Body -->
        <div id="chat-body">
            <div id="chat-messages">
                <!-- Welcome Message -->
                <div class="welcome-message" onclick="toggleWelcomeMessage()">
                    👋 Welcome! I'm your Docker & Kubernetes Assistant.
                    Ask me anything about Docker, Kubernetes, and best practices.
                    <div class="hidden-content">
                        Hi! I'm your Docker & Kubernetes Assistant.  
                        Ask me anything about Dockerfiles, Kubernetes configurations, and best practices.
                    </div>
                </div>
            </div>
        </div>
      
        <!-- Chat Input -->
        <div id="chat-input">
            <input type="text" id="chat-message" placeholder="Type your question...">
            <button id="chat-send">Send</button>
        </div>
      </div>
      </div>
      <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatbotToggle = document.getElementById('chatbot-toggle');
            const chatbotInterface = document.getElementById('chatbot-interface');
            const chatClose = document.getElementById('chat-close');
            const chatBody = document.getElementById('chat-body');
            const chatMessages = document.getElementById('chat-messages');
            const chatMessageInput = document.getElementById('chat-message');
            const chatSendButton = document.getElementById('chat-send');
      
            // Toggle Chat Interface
            chatbotToggle.addEventListener('click', () => {
                chatbotInterface.style.display = 'block';
            });
      
            // Close Chat Interface
            chatClose.addEventListener('click', () => {
                chatbotInterface.style.display = 'none';
            });
      
            // Send Message to Chatbot
            chatSendButton.addEventListener('click', async () => {
                const message = chatMessageInput.value.trim();
                if (message) {
                    // Add User Message to Chat
                    chatMessages.innerHTML += `<div class="message"><strong>You:</strong> ${message}</div>`;
                    chatMessageInput.value = '';
      
                    // Show Loading Spinner
                    chatMessages.innerHTML += `<div id="loading-spinner">Loading...</div>`;
      
                    // Call Backend API
                    try {
                        const response = await fetch('/api/chat', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ message })
                        });
                        const data = await response.json();
      
                        // Remove Loading Spinner and Add Bot Response
                        document.getElementById('loading-spinner').remove();
                        chatMessages.innerHTML += `<div class="message"><strong>Assistant:</strong> ${data.response}</div>`;
                    } catch (error) {
                        console.error('Error:', error);
                        chatMessages.innerHTML += `<div class="message"><strong>Error:</strong> Failed to get response.</div>`;
                    }
      
                    // Scroll to Bottom of Chat
                    chatBody.scrollTop = chatBody.scrollHeight;
                }
            });
      
            // Allow Pressing "Enter" to Send a Message
            chatMessageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    chatSendButton.click();
                }
            });
        });
      </script>
        <script>
           function filterCards() {
  const input = document.getElementById('searchInput').value.toUpperCase();
  const cards = document.querySelectorAll('.container-card');

  cards.forEach(card => {
    const name = card.querySelector('h3').textContent.toUpperCase();
    if (name.includes(input)) {
      card.style.display = '';
    } else {
      card.style.display = 'none';
    }
  });
}
document.addEventListener("DOMContentLoaded", function () {
  fetchDockerContainers();

  async function fetchDockerContainers() {
    try {
      const response = await fetch('/containers');
      if (!response.ok) throw new Error('Failed to fetch containers');
      const containers = await response.json();
      const containersContainer = document.getElementById('containersContainer');

      containersContainer.innerHTML = ''; 

      for (const container of containers) {
        try {
          // Fetch CPU & Memory stats
          const statsResponse = await fetch(`/containers/${container.containerId}/stats`);
          if (!statsResponse.ok) throw new Error(`Failed to fetch stats for container ${container.containerId}`);
          const stats = await statsResponse.json();

          // Calculate CPU and Memory Usage
          const cpuUsage = stats.cpu_stats.cpu_usage.total_usage || 0;
          const systemCpuUsage = stats.cpu_stats.system_cpu_usage || 1;
          const cpuPercent = (cpuUsage / systemCpuUsage) * 100;

          const memoryUsage = stats.memory_stats.usage || 0;
          const memoryLimit = stats.memory_stats.limit || 1;
          const memoryPercent = (memoryUsage / memoryLimit) * 100;

          // Create Card
          const card = document.createElement('div');
          card.className = 'container-card col-md-6';
          card.innerHTML = `
            <h3>${container.name}</h3>
            <div class="details">
              <p><strong>ID:</strong> <span class="container-id" title="Click to copy full ID">${container.containerId.substring(0, 12)}...</span> 
              <button class="copy-id-btn" data-id="${container.containerId}" data-tooltip="Copy full ID">
                  <i class="fas fa-copy"></i>
              </button></p>
               <p><strong>Status:</strong> ${container.status}</p>
              <p><strong>Image:</strong> ${container.image}</p>
              <p><strong>Volume:</strong> ${extractVolumeNames(container.volumes)}</p>
            </div>
            <div class="graph-container">
              <div class="graph">
                <canvas id="cpuChart-${container.containerId}"></canvas>
              </div>
              <div class="graph">
                <canvas id="memoryChart-${container.containerId}"></canvas>
              </div>
            </div>
            <div class="container" style="display: grid; place-items: center;">  

             <div class="action-buttons">
        <button class="action-btn btn-pastel-red" onclick="deleteContainer('${container.containerId}')" data-tooltip="Delete container">
            <i class="fas fa-trash"></i> Delete
        </button>
        <button class="action-btn btn-blue2" onclick="restartContainer('${container.containerId}')" data-tooltip="Restart container">
            <i class="fas fa-redo"></i> Restart
        </button>
        <button class="action-btn btn-pastel-docker-blue" onclick="stopContainer('${container.containerId}')" data-tooltip="Stop container">
            <i class="fas fa-stop"></i> Stop
        </button>
        <button class="action-btn btn-pastel-gray" onclick="connectTerminal('${container.containerId}')" data-tooltip="Open terminal">
            <i class="fas fa-terminal"></i> Terminal
        </button>
        <button class="action-btn btn-blue2" onclick="viewLogs('${container.containerId}')" data-tooltip="View logs">
            <i class="fas fa-file-alt"></i> Logs
        </button>
    </div>
    </div>
          `;
          containersContainer.appendChild(card);

          // Initialize Charts
          const cpuCtx = document.getElementById(`cpuChart-${container.containerId}`).getContext('2d');
          const memoryCtx = document.getElementById(`memoryChart-${container.containerId}`).getContext('2d');

          // Initialize CPU Chart
const cpuChart = new Chart(cpuCtx, {
  type: 'line',
  data: {
    labels: [],
    datasets: [{
      label: 'CPU Usage (%)',
      data: [],
      borderColor: '#1e90ff',
      fill: false
    }]
  },
  options: {
    scales: {
      y: {
        beginAtZero: true,
        suggestedMax: 10, // Default max for small values
        ticks: {
          callback: function (value) {
            return value + '%'; 
          }
        }
      }
    },
    plugins: {
      tooltip: {
        callbacks: {
          label: function (context) {
            return `${context.dataset.label}: ${context.raw.toFixed(2)}%`; 
          }
        }
      }
    }
  }
});

// Initialize Memory Chart
const memoryChart = new Chart(memoryCtx, {
  type: 'line',
  data: {
    labels: [],
    datasets: [{
      label: 'Memory Usage (%)',
      data: [],
      borderColor: '#326ce5',
      fill: false
    }]
  },
  options: {
    scales: {
      y: {
        beginAtZero: true,
        suggestedMax: 10, 
        ticks: {
          callback: function (value) {
            return value + '%'; 
          }
        }
      }
    },
    plugins: {
      tooltip: {
        callbacks: {
          label: function (context) {
            return `${context.dataset.label}: ${context.raw.toFixed(2)}%`; 
          }
        }
      }
    }
  }
});

          const updateCharts = () => {
  fetch(`/containers/${container.containerId}/stats`)
    .then(response => response.json())
    .then(stats => {
      const cpuUsage = stats.cpu_stats.cpu_usage.total_usage || 0;
      const systemCpuUsage = stats.cpu_stats.system_cpu_usage || 1;
      const cpuPercent = (cpuUsage / systemCpuUsage) * 100;

      const memoryUsage = stats.memory_stats.usage || 0;
      const memoryLimit = stats.memory_stats.limit || 1;
      const memoryPercent = (memoryUsage / memoryLimit) * 100;

      const time = new Date().toLocaleTimeString();

      // Update CPU Chart
      cpuChart.data.labels.push(time);
      cpuChart.data.datasets[0].data.push(cpuPercent);
      if (cpuChart.data.labels.length > 10) {
        cpuChart.data.labels.shift();
        cpuChart.data.datasets[0].data.shift();
      }

      const cpuMax = Math.max(...cpuChart.data.datasets[0].data);
      cpuChart.options.scales.y.suggestedMax = Math.min(Math.ceil(cpuMax * 1.2), 100); 
      cpuChart.update();

      // Update Memory Chart
      memoryChart.data.labels.push(time);
      memoryChart.data.datasets[0].data.push(memoryPercent);
      if (memoryChart.data.labels.length > 10) {
        memoryChart.data.labels.shift();
        memoryChart.data.datasets[0].data.shift();
      }

      // Dynamically adjust Y-axis for Memory
      const memoryMax = Math.max(...memoryChart.data.datasets[0].data);
      memoryChart.options.scales.y.suggestedMax = Math.min(Math.ceil(memoryMax * 1.2), 100); // Add 20% padding
      memoryChart.update();
    });
};

          // Update charts every 5 seconds
          setInterval(updateCharts, 5000);
        } catch (error) {
          console.error(`Error fetching stats for container ${container.containerId}:`, error);
        }
      }
    } catch (error) {
      console.error('Error fetching Docker containers:', error);
      Swal.fire('Error!', 'Failed to fetch Docker containers.', 'error');
    }
  }

 

    function extractVolumeNames(volumes) {
    if (!volumes) return 'N/A'; // If volumes is null or undefined

    if (Array.isArray(volumes)) {
        return volumes.map(v => truncateName(v.Name || v)).join(', '); // Shorten each volume name
    }

    if (typeof volumes === 'object' && volumes.Name) {
        return truncateName(volumes.Name); // Shorten a single volume name
    }

    return truncateName(volumes.toString()); // Shorten the volume name if it's a string
}

function truncateName(name, maxLength = 15) {
    if (!name) return 'N/A';
    return name.length > maxLength ? name.substring(0, maxLength) + '...' : name;
}


window.viewLogs = async function (containerId) {
            try {
                const response = await fetch(`/containers/${containerId}/logs`);
                if (!response.ok) {
                    throw new Error(`Failed to fetch logs for container ${containerId}`);
                }
                const data = await response.json();

                // Display logs in a modal with syntax highlighting
                Swal.fire({
                    title: `Logs - Container ${containerId}`,
                    html: `
                        <div style="max-height: 400px; overflow-y: auto; background:#000;color:#0f0;padding:10px;border-radius:5px;">
                            <pre><code class="language-log">${data.logs}</code></pre>
                        </div>
                    `,
                    showCancelButton: false,
                    showConfirmButton: false,
                    width: '80%',
                    didOpen: () => {
                        Prism.highlightAll(); // Apply syntax highlighting
                    }
                });
            } catch (error) {
                console.error('Error fetching container logs:', error);
                Swal.fire('Error!', 'An error occurred while fetching logs.', 'error');
            }
        };




// Function to delete a Docker container
window.deleteContainer = async function(containerId) {
    try {
        const response = await fetch(`/containers/${containerId}`, { method: 'DELETE' });
        
        if (response.ok) {
            Swal.fire('Deleted!', 'Container deleted successfully.', 'success').then(() => {
                location.reload(); 
            });
        } else {
            const errorData = await response.json();
            Swal.fire('Error!', errorData.message, 'error');
        }
    } catch (error) {
        console.error('Error deleting Docker container:', error);
        Swal.fire('Error!', 'An error occurred while deleting the container.', 'error');
    }
};

// Function to stop a Docker container
window.stopContainer = async function(containerId) {
    try {
        const response = await fetch(`/containers/${containerId}/stop`, { method: 'POST' });
        
        if (response.ok) {
            Swal.fire('Stopped!', 'Container stopped successfully.', 'success').then(() => {
                fetchDockerContainers(); 
            });
        } else {
            const errorData = await response.json();
            Swal.fire('Error!', errorData.message, 'error');
        }
    } catch (error) {
        console.error('Error stopping Docker container:', error);
        Swal.fire('Error!', 'An error occurred while stopping the container.', 'error');
    }
};
// Function to connect to a container's terminal
window.connectTerminal = function (containerId) {
    if (!containerId) {
        Swal.fire('Error', 'Container ID is required to connect to the terminal.', 'error');
        return;
    }

    // Create a modal for the terminal
    Swal.fire({
        title: `Terminal - Container ${containerId}`,
        html: `
            <div id="terminal-container-${containerId}" style="height: 300px; background-color: #000; color: #00FF00; font-family: monospace; padding: 10px; border-radius: 5px;"></div>
        `,
        showCancelButton: false,
        showConfirmButton: false,
        width: '80%',
        didOpen: () => {
            const terminalElement = document.getElementById(`terminal-container-${containerId}`);

            if (!terminalElement) {
                console.error(`Terminal container with ID terminal-container-${containerId} not found.`);
                return;
            }

            // Initialize the terminal
            const terminal = new Terminal({
                cursorBlink: true,
                theme: {
                    background: '#000000',
                    foreground: '#00FF00'
                }
            });
            terminal.open(terminalElement);

            // Establish WebSocket connection
            const socket = new WebSocket(`ws://localhost:5000?containerId=${containerId}`);

            socket.addEventListener('open', () => {
                console.log(`WebSocket connection established for container ${containerId}`);
            });

            let messageBuffer = '';
            socket.addEventListener('message', (event) => {
                messageBuffer += event.data;
                terminal.write(messageBuffer);
                messageBuffer = '';
            });

            socket.addEventListener('close', () => {
                console.log(`WebSocket connection closed for container ${containerId}`);
                terminal.write('\nConnection closed.\n');
            });

            socket.addEventListener('error', (error) => {
                console.error(`WebSocket error for container ${containerId}:`, error);
                terminal.write(`\nWebSocket error: ${error.message}\n`);
            });

            // Send data to the container
            terminal.onData((data) => {
                socket.send(data);
            });

            // Handle terminal resize
            terminal.onResize(({ cols, rows }) => {
                socket.send(JSON.stringify({ type: 'resize', cols, rows }));
            });
        }
    });
};

// Function to restart a Docker container
window.restartContainer = async function(containerId) {
    try {
        const response = await fetch(`/containers/${containerId}/restart`, { method: 'POST' });

        if (response.ok) {
            Swal.fire('Restarted!', 'Container restarted successfully.', 'success').then(() => {
                fetchDockerContainers(); 
            });
        } else {
            const errorData = await response.json();
            Swal.fire('Error!', errorData.message || 'Failed to restart the container.', 'error');
        }
    } catch (error) {
        console.error('Error restarting Docker container:', error);
        Swal.fire('Error!', 'An unexpected error occurred while restarting the container.', 'error');
    }
};


});

// Add this to your DOMContentLoaded event listener
document.addEventListener('click', function(e) {
    if (e.target.closest('.container-id') || e.target.closest('.copy-id-btn')) {
        const btn = e.target.closest('.container-id') || e.target.closest('.copy-id-btn');
        const fullId = btn.dataset.id || btn.parentNode.dataset.id;
        navigator.clipboard.writeText(fullId).then(() => {
            Swal.fire({
                title: 'Copied!',
                text: 'Container ID copied to clipboard',
                icon: 'success',
                timer: 1000,
                showConfirmButton: false
            });
        });
    }
});
          </script>

          <script>
            document.addEventListener("DOMContentLoaded", function () {
    fetchImages();

    async function fetchImages() {
        try {
            const response = await fetch('/images');
            const images = await response.json();
            const imageSelect = document.getElementById('imageName');

            images.forEach(image => {
                const option = document.createElement('option');
                option.value = image.name;
                option.text = image.name;
                imageSelect.add(option);
            });
        } catch (error) {
            console.error('Error fetching images:', error);
        }
    }

   


// Handle form submission
document.getElementById('createContainerForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const imageName = document.getElementById('imageName').value;
    const containerName = document.getElementById('containerName').value;
    const port = document.getElementById('port').value;

    // Collect selected volumes
    const volumeCheckboxes = document.querySelectorAll('.form-check-input:checked');
    const volumes = Array.from(volumeCheckboxes).map(checkbox => checkbox.value);

    try {
        const response = await fetch('/containers', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ imageName, containerName, volumes, port }),
        });

        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || 'An unexpected error occurred.');
        }

        Swal.fire('Success!', 'Container created successfully.', 'success').then(() => {
            location.reload(); // Refresh the page or update the container list
        });
    } catch (error) {
        Swal.fire('Error!', error.message, 'error');
    }
});
});
         
          </script>
          <script>



async function populateVolumeCheckboxes() {
  const response = await fetch('http://localhost:5000//volumes');
  const volumes = await response.json();
  const volumeContainer = document.getElementById('volumeContainer');

  volumeContainer.innerHTML = ''; 

  volumes.forEach(volume => {
    const volumeDiv = document.createElement('div');
    volumeDiv.className = 'form-check';
    volumeDiv.innerHTML = `
      <input class="form-check-input" type="checkbox" value="${volume.Name}" id="volume-${volume.Name}">
      <label class="form-check-label" for="volume-${volume.Name}">
        ${volume.Name}
      </label>
    `;
    volumeContainer.appendChild(volumeDiv);
  });
}

document.addEventListener('DOMContentLoaded', function () {
  populateVolumeCheckboxes();
});
          </script>
         <script src="https://cdn.jsdelivr.net/npm/xterm/lib/xterm.js"></script>
         <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/xterm/css/xterm.css">
         <script src="https://cdn.jsdelivr.net/npm/xterm/lib/xterm.js"></script>

      <!-- End Custom template -->
    </div>
 
    <!--   Core JS Files   -->
    <script src="../assets/js/core/jquery-3.7.1.min.js"></script>
    <script src="../assets/js/core/popper.min.js"></script>
    <script src="../assets/js/core/bootstrap.min.js"></script>

    <!-- jQuery Scrollbar -->
    <script src="../assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js"></script>
    <!-- Moment JS -->
    <script src="../assets/js/plugin/moment/moment.min.js"></script>

    <!-- Chart JS -->
    <script src="../assets/js/plugin/chart.js/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- jQuery Sparkline -->
    <script src="../assets/js/plugin/jquery.sparkline/jquery.sparkline.min.js"></script>

    <!-- Chart Circle -->
    <script src="../assets/js/plugin/chart-circle/circles.min.js"></script>

    <!-- Datatables -->
    <script src="../assets/js/plugin/datatables/datatables.min.js"></script>

    <!-- Bootstrap Notify -->
    <script src="../assets/js/plugin/bootstrap-notify/bootstrap-notify.min.js"></script>

    <!-- jQuery Vector Maps -->
    <script src="../assets/js/plugin/jsvectormap/jsvectormap.min.js"></script>
    <script src="../assets/js/plugin/jsvectormap/world.js"></script>

    <!-- Sweet Alert -->
    <script src="../assets/js/plugin/sweetalert/sweetalert.min.js"></script>

    <!-- Kaiadmin JS -->
    <script src="../assets/js/kaiadmin.min.js"></script>
    <script src="../assets/js/script.js"></script>

    <!-- Kaiadmin DEMO methods, don't include it in your project! -->
    <script src="../assets/js/setting-demo2.js"></script>
    <script>
      function logout() {
            Swal.fire({
                title: 'Logout Confirmation',
                text: 'Are you sure you want to log out?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#326ce5',
                cancelButtonColor: '#ff6666',
                confirmButtonText: 'Yes, log out'
            }).then((result) => {
                if (result.isConfirmed) {
                    localStorage.clear();
                    window.location.replace("/login");
                }
            });
        }
    </script>
    <script>
      function recherche() {
        var input, filter, cards, card, title, i, txtValue;
        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        cards = document.getElementsByClassName("card");
        
        for (i = 0; i < cards.length; i++) {
            card = cards[i];
            title = card.getElementsByClassName("card-title")[0]; 
            if (title) {
                txtValue = title.textContent || title.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    card.style.display = ""; 
                } else {
                    card.style.display = "none";
                }
            }       
        }
    }
    
    </script>


<div class="modal fade" id="createContainerModal" tabindex="-1" aria-labelledby="createContainerModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createContainerModalLabel">Create a New Container</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="createContainerForm">
          <div class="form-group">
            <label for="imageName">Select Image:</label>
            <select id="imageName" class="form-control" required></select>
          </div>
          <div class="form-group">
            <label for="containerName">Container Name:</label>
            <input type="text" id="containerName" class="form-control" required>
          </div>
          <div class="form-group">
            <label>Mount Volumes:</label>
            <div id="volumeContainer" class="scrollable-checkbox-list">
            </div>
          </div>
          <div class="form-group">
            <label for="port">Port (optional):</label>
            <input type="number" id="port" class="form-control">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="action-btn btn-pastel-red" data-bs-dismiss="modal">Close</button>
        <button type="submit" form="createContainerForm" class="action-btn btn-blue2">Run Container</button>
      </div>
    </div>
  </div>
</div>
  </body>
  <!-- <footer class="footer">
    <div class="container-fluid d-flex justify-content-between">
      <div class="copyright">
        2024, made by
        <h6>Nada Bouaziz</h6>
      </div>
      <div>
        
        <a target="_blank">Dockube Pilot</a>.
      </div>
    </div>
  </footer> -->
</html>
