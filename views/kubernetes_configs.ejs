<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Kubernetes configurations</title>
    <meta content="width=device-width, initial-scale=1.0, shrink-to-fit=no" name="viewport" />
    <link rel="icon" href="../assets/img/dockube3.png" type="image/x-icon" />
    <!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.27/dist/sweetalert2.min.css">
<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.27/dist/sweetalert2.all.min.js"></script>
<link rel="stylesheet" href="../assets/css/kubernetes_configs.css">

    <!-- Fonts and icons -->
    <script src="../assets/js/plugin/webfont/webfont.min.js"></script>
    <script>
      WebFont.load({
        google: { families: ["Public Sans:300,400,500,600,700"] },
        custom: {
          families: [
            "Font Awesome 5 Solid",
            "Font Awesome 5 Regular",
            "Font Awesome 5 Brands",
            "simple-line-icons",
          ],
          urls: ["../assets/css/fonts.min.css"],
        },
        active: function () {
          sessionStorage.fonts = true;
        },
      });
    </script>
    <!-- CSS Files -->
    <link rel="stylesheet" href="../assets/css/bootstrap.min.css" />
    <link rel="stylesheet" href="../assets/css/plugins.min.css" />
    <link rel="stylesheet" href="../assets/css/kaiadmin.min.css" />
    <!-- CSS Just for demo purpose, don't include it in your project -->
    <link rel="stylesheet" href="../assets/css/demo.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
<!-- Bootstrap 4 -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

  </head>
  <body>
    <div class="wrapper">
      <!-- Sidebar -->
      <div class="sidebar" data-background-color="dark">
          <div class="sidebar-logo">
              <!-- Logo Header -->
              <div class="logo-header" data-background-color="dark">
                  <a href="/" class="logo" style="display: flex; align-items: center;">
                      <img src="../assets/img/dockube3.png" alt="navbar brand" class="navbar-brand" height="40" />
                      <span style="margin-left: 8px; font-size: 1.2em; font-weight: bold; color: aliceblue;">Dockube Pilot</span>
                  </a>
                  <div class="nav-toggle">
                      <button class="btn btn-toggle toggle-sidebar">
                          <i class="gg-menu-right"></i>
                      </button>
                      <button class="btn btn-toggle sidenav-toggler">
                          <i class="gg-menu-left"></i>
                      </button>
                  </div>
                  <button class="topbar-toggler more">
                      <i class="gg-more-vertical-alt"></i>
                  </button>
              </div>
              <!-- End Logo Header -->
          </div>
          <div class="sidebar-wrapper scrollbar scrollbar-inner">
            <div class="sidebar-content">
              <ul class="nav nav-secondary">
                <li class="nav-item">
                  <a href="/" aria-expanded="false">
                    <i class="fas fa-tachometer-alt"></i> <!-- Dashboard icon -->
                    <p>Dashboard</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockerRegistries">
                    <i class="fas fa-warehouse"></i> <!-- Registry icon -->
                    <p>Docker Registries</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockerfile_list">
                    <i class="fas fa-file-code"></i> <!-- Code file icon for Dockerfile -->
                    <p>Dockerfile</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockerimg">
                    <i class="fas fa-images"></i> <!-- Images icon -->
                    <p>Docker Images</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockercontainers">
                    <i class="fas fa-box"></i> <!-- Box icon for containers -->
                    <p>Docker Containers</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/volumes">
                    <i class="fas fa-database"></i> <!-- Database icon for Volumes -->
                    <p>Volumes</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/compose">
                    <i class="fas fa-cubes"></i> <!-- Stacked cubes for Compose -->
                    <p>Docker Compose</p>
                  </a>
                </li>
                <li class="nav-item">
                    <a href="/swarm_list">
                        <i class="fas fa-project-diagram"></i> <!-- Stacked cubes for Compose -->
                      <p>Docker Swarm</p>
                    </a>
                  </li>
<li class="nav-item active">
    <a data-bs-toggle="collapse" href="#kubernetesMenu" aria-expanded="false">
        <i class="fas fa-dharmachakra"></i>
        <p>Kubernetes</p>
        <span class="caret"></span>
    </a>
    <div class="collapse" id="kubernetesMenu">
        <ul class="nav nav-collapse">
            <li>
                <a href="/kubernetes/cluster">
                    <span class="sub-item">Cluster Setup</span>
                </a>
            </li>
            <li>
                <a href="/kubernetes/nodes">
                    <span class="sub-item">Nodes</span>
                </a>
            </li>
            <li>
                <a href="/kubernetes/deployments">
                    <span class="sub-item">Deployments</span>
                </a>
            </li>
            <li>
                <a href="/kubernetes/statefulsets">
                    <span class="sub-item">StatefulSets</span>
                </a>
            </li>
            <li>
                <a href="/kubernetes/services">
                    <span class="sub-item">Services</span>
                </a>
            </li>
            <li>
                <a href="/kubernetes/pods">
                    <span class="sub-item">Pods</span>
                </a>
            </li>
            <li>
                <a href="/kubernetes/pvcs">
                    <span class="sub-item">Storage</span>
                </a>
            </li>
            <li>
                <a href="/kubernetes/configs">
                    <span class="sub-item">ConfigMaps && Secrets</span>
                </a>
            </li>
            <li>
                <a href="/kubernetes/namespaces">
                    <span class="sub-item">Namespaces</span>
                </a>
            </li>
             <li>
                <a href="/kubernetes/ingresses">
                    <span class="sub-item">Ingresses</span>
                </a>
            </li>
        </ul>
    </div>
</li>
<li class="nav-item">
  <a href="/cicd_integration">
    <i class="fas fa-sync-alt"></i>
    <p>CI CD</p>
  </a>
</li>
                <li class="nav-item">
                  <a data-bs-toggle="collapse" href="#" onclick="logout()">
                    <i class="fas fa-sign-out-alt"></i> <!-- Logout icon -->
                    <p>Logout</p>
                  </a>
                </li>
              </ul>
            </div>
          </div>
      </div>
      <!-- End Sidebar -->
      <div class="main-panel">
          <div class="main-header">
              <div class="main-header-logo">
                  <!-- Logo Header -->
                  <div class="logo-header" data-background-color="dark">
                      <a href="../index.html" class="logo">
                          <img src="../assets/img/dockube3.png" alt="navbar brand" class="navbar-brand" />
                      </a>
                      <div class="nav-toggle">
                          <button class="btn btn-toggle toggle-sidebar">
                              <i class="gg-menu-right"></i>
                          </button>
                          <button class="btn btn-toggle sidenav-toggler">
                              <i class="gg-menu-left"></i>
                          </button>
                      </div>
                      <button class="topbar-toggler more">
                          <i class="gg-more-vertical-alt"></i>
                      </button>
                  </div>
                  <!-- End Logo Header -->
              </div>
              <!-- Navbar Header -->
              <nav class="navbar navbar-header navbar-header-transparent navbar-expand-lg border-bottom">
                  <div class="container-fluid">
                      <nav class="navbar navbar-header-left navbar-expand-lg navbar-form nav-search p-0 d-none d-lg-flex">
                          
                      </nav>
                      <ul class="navbar-nav topbar-nav ms-md-auto align-items-center">
                          <li class="nav-item topbar-user dropdown hidden-caret">
                              <a class="dropdown-toggle profile-pic" data-bs-toggle="dropdown" href="/profile" aria-expanded="false">
                                  <span class="profile-username">
                                      <span class="op-7">Hi,</span>
                                      <span class="fw-bold">Hizrian</span>
                                  </span>
                              </a>
                              <ul class="dropdown-menu dropdown-user animated fadeIn">
                                  <div class="dropdown-user-scroll scrollbar-outer">
                                      <li>
                                          <div class="user-box">
                                              <div class="avatar-lg">
                                                  <img src="../assets/img/profile.jpg" alt="image profile" class="avatar-img rounded" />
                                              </div>
                                              <div class="u-text">
                                                  <h4>Hizrian</h4>
                                                  <p class="text-muted">hello@example.com</p>
                                                  <a href="/profile" class="action-btn btn-blue1 btn-sm">Update Profile</a>
                                              </div>
                                          </div>
                                      </li>
                                      <li>
                                          <div class="dropdown-divider"></div>
                                          <a class="dropdown-item" href="#" onclick="logout()">Logout</a>
                                      </li>
                                  </div>
                              </ul>
                          </li>
                      </ul>
                  </div>
              </nav>
              <!-- Add Vis.js library -->
<script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
<link href="https://unpkg.com/vis-network/styles/vis-network.min.css" rel="stylesheet" />
              <script>
                  document.addEventListener("DOMContentLoaded", function() {
                      var user = JSON.parse(localStorage.getItem("user"));
                      if (user) {
                          document.querySelector(".profile-username .fw-bold").textContent = user.username;
                          document.querySelector(".u-text h4").textContent = user.username;
                          document.querySelector(".u-text .text-muted").textContent = user.email;
                      }
                  });
              </script>
              <!-- End Navbar -->
          </div>
          <div class="container">
            <div class="card-body">
              <!-- Kubernetes Creation Flow Stepper -->
              <div class="kubernetes-flow-stepper mb-4">
                  <div class="stepper-header">
                      <h4>Kubernetes Creation Journey</h4>
                      <p class="text-muted">Follow this guided path to successfully deploy your application</p>
                  </div>
                  
                  <div class="stepper-container">
                      <div class="stepper-progress">
                          <div class="stepper-progress-bar" role="progressbar" style="width: 0%"></div>
                      </div>
                      
                      <div class="stepper-steps">
                          <!-- Cluster Setup -->
                          <div class="step" data-step="1" data-route="/kubernetes/cluster">
                              <div class="step-icon">
                                  <i class="fas fa-server"></i>
                              </div>
                              <div class="step-label">Cluster</div>
                              <div class="step-tooltip">
                                  <strong>Cluster Setup</strong><br>
                                  Your Kubernetes foundation - like building the airport before planes can land
                              </div>
                          </div>
                          
                          <!-- Nodes -->
                          <div class="step" data-step="2" data-route="/kubernetes/nodes">
                              <div class="step-icon">
                                  <i class="fas fa-network-wired"></i>
                              </div>
                              <div class="step-label">Nodes</div>
                              <div class="step-tooltip">
                                  <strong>Nodes</strong><br>
                                  The worker bees of your cluster - add more to handle heavier loads
                              </div>
                          </div>
                          
                          <!-- Namespaces -->
                          <div class="step" data-step="3" data-route="/kubernetes/namespaces">
                              <div class="step-icon">
                                  <i class="fas fa-layer-group"></i>
                              </div>
                              <div class="step-label">Namespaces</div>
                              <div class="step-tooltip">
                                  <strong>Namespaces</strong><br>
                                  Create departments in your cluster - keeps things organized like office floors
                              </div>
                          </div>
                          
                          <!-- ConfigMaps & Secrets -->
                          <div class="step" data-step="4" data-route="/kubernetes/configs">
                              <div class="step-icon">
                                  <i class="fas fa-key"></i>
                              </div>
                              <div class="step-label">Configs</div>
                              <div class="step-tooltip">
                                  <strong>ConfigMaps & Secrets</strong><br>
                                  The configuration vault - where you store settings and sensitive data
                              </div>
                          </div>
                          
                          <!-- Storage -->
                          <div class="step" data-step="5" data-route="/kubernetes/pvcs">
                              <div class="step-icon">
                                  <i class="fas fa-database"></i>
                              </div>
                              <div class="step-label">Storage</div>
                              <div class="step-tooltip">
                                  <strong>Persistent Storage</strong><br>
                                  Your cluster's hard drive - ensures data survives pod restarts
                              </div>
                          </div>
                          
                          <!-- Deployments/StatefulSets -->
                          <div class="step" data-step="6" data-route="/kubernetes/deployments">
                              <div class="step-icon">
                                  <i class="fas fa-rocket"></i>
                              </div>
                              <div class="step-label">Workloads</div>
                              <div class="step-tooltip">
                                  <strong>Deployments/StatefulSets</strong><br>
                                  Blueprint for your application - defines how many copies to run
                              </div>
                          </div>
                          
                          <!-- Pods -->
                          <div class="step" data-step="7" data-route="/kubernetes/pods">
                              <div class="step-icon">
                                  <i class="fas fa-cube"></i>
                              </div>
                              <div class="step-label">Pods</div>
                              <div class="step-tooltip">
                                  <strong>Pods</strong><br>
                                  Your running application containers - like individual hotel rooms
                              </div>
                          </div>
                          
                          <!-- Services -->
                          <div class="step" data-step="8" data-route="/kubernetes/services">
                              <div class="step-icon">
                                  <i class="fas fa-plug"></i>
                              </div>
                              <div class="step-label">Services</div>
                              <div class="step-tooltip">
                                  <strong>Services</strong><br>
                                  The front desk - provides stable access to your pods
                              </div>
                          </div>
                          <!-- Ingress -->
            <div class="step" data-step="9" data-route="/kubernetes/ingresses">
                <div class="step-icon">
                    <i class="fas fa-globe"></i>
                </div>
                <div class="step-label">Ingress</div>
                <div class="step-tooltip">
                    <strong>Ingress</strong><br>
                    The gateway to your services - manages external access with routing rules
                </div>
            </div>

                      </div>
                  </div>
                  
                  <!-- Current Step Explanation Panel -->
                  <div class="step-explanation-panel">
                      <div class="explanation-header">
                          <h5><i class="fas fa-lightbulb"></i> Understanding This Step</h5>
                          <div class="step-metaphor">
                              <i class="fas fa-comment-dots"></i>
                              <span id="currentStepMetaphor">Select a step to see its real-world analogy</span>
                          </div>
                      </div>
                      
                      <div class="explanation-content">
                          <div class="row">
                              <div class="col-md-6">
                                  <div class="explanation-card">
                                      <div class="explanation-icon">
                                          <i class="fas fa-question-circle"></i>
                                      </div>
                                      <h6>What is this?</h6>
                                      <p id="whatIsThis">Select a step to learn about this Kubernetes component</p>
                                  </div>
                              </div>
                              <div class="col-md-6">
                                  <div class="explanation-card">
                                      <div class="explanation-icon">
                                          <i class="fas fa-check-circle"></i>
                                      </div>
                                      <h6>Why is it important?</h6>
                                      <p id="whyImportant">Select a step to understand its role in your cluster</p>
                                  </div>
                              </div>
                          </div>
                          
                          <div class="explanation-visual mt-3">
                              <div class="visual-placeholder">
                                  <i class="fas fa-image"></i>
                                  <p>Visual representation will appear here when a step is selected</p>
                              </div>
                          </div>
                      </div>
                  </div>
                  
                  <!-- Next Button Container -->
                  <div class="stepper-navigation mt-3">
                      <button id="prevStepBtn" class="btn btn-secondary" disabled>
                          <i class="fas fa-arrow-left"></i> Previous
                      </button>
                      <button id="nextStepBtn" class="btn btn-primary">
                          Next Step <i class="fas fa-arrow-right"></i>
                      </button>
                      <div class="step-counter">
                          Step <span id="currentStepNumber">0</span> of <span id="totalSteps">9</span>
                      </div>
                  </div>
              </div>
            <div class="page-inner">
              <div class="page-header">
                <h2>Kubernetes Configurations</h2>
              </div>
      
              <div class="row">
                <div class="col-md-12">
                  <div class="card">
                    <div class="card-header gradient-card-header">
                      <ul class="nav nav-tabs" id="configTabs" role="tablist">
                        <li class="nav-item">
                          <a class="nav-link active" id="configmaps-tab" data-toggle="tab" href="#configmaps" role="tab" aria-controls="configmaps" aria-selected="true">
                            ConfigMaps
                          </a>
                        </li>
                        <li class="nav-item">
                          <a class="nav-link" id="secrets-tab" data-toggle="tab" href="#secrets" role="tab" aria-controls="secrets" aria-selected="false">
                            Secrets
                          </a>
                        </li>
                        <li class="nav-item">
                          <a class="nav-link" id="create-tab" data-toggle="tab" href="#create" role="tab" aria-controls="create" aria-selected="false">
                            Create Configuration
                          </a>
                        </li>
                      </ul>
                    </div>
                    <div class="card-body">
                      <div class="tab-content" id="configTabsContent">
                        <!-- ConfigMaps Tab -->
                        <div class="tab-pane fade show active" id="configmaps" role="tabpanel" aria-labelledby="configmaps-tab">
                          <div class="d-flex justify-content-between mb-3">
                            <div class="form-group mb-0">
                              <select class="form-control" id="configmapNamespaceFilter" style="width: 200px;">
                                <option value="">All Namespaces</option>
                                <option value="default">default</option>
                              </select>
                            </div>
                            <button id="refreshConfigMaps" class="btn btn-sm btn-primary">
                              <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                          </div>
                          
                          <div class="table-responsive">
                            <table class="table table-striped table-hover">
                              <thead>
                                <tr>
                                  <th>Name</th>
                                  <th>Namespace</th>
                                  <th>Data Count</th>
                                  <th>Age</th>
                                  <th>Actions</th>
                                </tr>
                              </thead>
                              <tbody id="configmapTableBody">
                                <tr>
                                  <td colspan="5" class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                      <span class="sr-only">Loading...</span>
                                    </div>
                                    <p>Loading ConfigMaps...</p>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </div>
                        </div>
                        
                        <!-- Secrets Tab -->
                        <div class="tab-pane fade" id="secrets" role="tabpanel" aria-labelledby="secrets-tab">
                          <div class="d-flex justify-content-between mb-3">
                            <div class="form-group mb-0">
                              <select class="form-control" id="secretNamespaceFilter" style="width: 200px;">
                                <option value="">All Namespaces</option>
                                <option value="default">default</option>
                              </select>
                            </div>
                            <button id="refreshSecrets" class="btn btn-sm btn-primary">
                              <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                          </div>
                          
                          <div class="table-responsive">
                            <table class="table table-striped table-hover">
                              <thead>
                                <tr>
                                  <th>Name</th>
                                  <th>Namespace</th>
                                  <th>Type</th>
                                  <th>Data Count</th>
                                  <th>Age</th>
                                  <th>Actions</th>
                                </tr>
                              </thead>
                              <tbody id="secretTableBody">
                                <tr>
                                  <td colspan="6" class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                      <span class="sr-only">Loading...</span>
                                    </div>
                                    <p>Loading Secrets...</p>
                                  </td>
                                </tr>
                              </tbody>
                            </table>
                          </div>
                        </div>
                        
                        <!-- Create Configuration Tab -->
                        <div class="tab-pane fade" id="create" role="tabpanel" aria-labelledby="create-tab">
                          <ul class="nav nav-tabs" id="createConfigTabs" role="tablist">
                            <li class="nav-item">
                              <a class="nav-link active" id="create-configmap-tab" data-toggle="tab" href="#create-configmap" role="tab" aria-controls="create-configmap" aria-selected="true">
                                Create ConfigMap
                              </a>
                            </li>
                            <li class="nav-item">
                              <a class="nav-link" id="create-secret-tab" data-toggle="tab" href="#create-secret" role="tab" aria-controls="create-secret" aria-selected="false">
                                Create Secret
                              </a>
                            </li>
                          </ul>
                          
                          <div class="tab-content mt-3" id="createConfigTabsContent">
                            <!-- ConfigMap Creation Form -->
                            <div class="tab-pane fade show active" id="create-configmap" role="tabpanel" aria-labelledby="create-configmap-tab">
                              <form id="createConfigMapForm">
                                <div class="row">
                                  <div class="col-md-6">
                                    <div class="form-group">
                                      <label for="configmapName">ConfigMap Name</label>
                                      <input type="text" class="form-control" id="configmapName" required>
                                      <small class="form-text text-muted">Must be lowercase alphanumeric with dashes</small>
                                    </div>
                                    
                                    <div class="form-group">
                                      <label for="configmapNamespace">Namespace</label>
                                      <select class="form-control" id="configmapNamespace" required>
                                        <option value="default">default</option>
                                        <!-- Other namespaces will be loaded dynamically -->
                                      </select>
                                    </div>
                                  </div>
                                  
                                  <div class="col-md-6">
                                    <div class="form-group">
                                      <label for="configmapType">Creation Method</label>
                                      <select class="form-control" id="configmapType">
                                        <option value="manual">Manual Entry</option>
                                        <option value="file">Upload File</option>
                                        <option value="envfile">Upload Env File</option>
                                      </select>
                                    </div>
                                  </div>
                                </div>
                                
                                <div id="configmapManualEntry">
                                  <div class="form-group">
                                    <label>Key-Value Pairs</label>
                                    <div id="configmapKeyValuePairs">
                                      <div class="row mb-2">
                                        <div class="col-md-5">
                                          <input type="text" class="form-control" placeholder="Key" name="configmapKey">
                                        </div>
                                        <div class="col-md-5">
                                          <input type="text" class="form-control" placeholder="Value" name="configmapValue">
                                        </div>
                                        <div class="col-md-2">
                                          <button type="button" class="btn btn-danger btn-sm" onclick="removeConfigMapPair(this)">
                                            <i class="fas fa-trash"></i>
                                          </button>
                                        </div>
                                      </div>
                                    </div>
                                    <button type="button" class="btn btn-secondary btn-sm mt-2" onclick="addConfigMapPair()">
                                      <i class="fas fa-plus"></i> Add Pair
                                    </button>
                                  </div>
                                </div>
                                
                                <div id="configmapFileUpload" style="display: none;">
                                  <div class="form-group">
                                    <label for="configmapFile">Config File</label>
                                    <input type="file" class="form-control-file" id="configmapFile">
                                    <small class="form-text text-muted">Upload a configuration file to create the ConfigMap</small>
                                  </div>
                                </div>
                                
                                <div id="configmapEnvFileUpload" style="display: none;">
                                  <div class="form-group">
                                    <label for="configmapEnvFile">Environment File</label>
                                    <input type="file" class="form-control-file" id="configmapEnvFile">
                                    <small class="form-text text-muted">Upload an environment file to create the ConfigMap</small>
                                  </div>
                                </div>
                                
                                <div class="form-check mb-3">
                                  <input type="checkbox" class="form-check-input" id="showConfigMapYamlPreview">
                                  <label class="form-check-label" style="margin-left: 20px;" for="showConfigMapYamlPreview">Show YAML Preview</label>
                                </div>
                                
                                <div id="configmapYamlPreviewContainer" style="display: none;">
                                  <h5>YAML Preview</h5>
                                  <div class="yaml-container">
                                    <pre id="configmapYamlPreview"></pre>
                                  </div>
                                </div>
                                
                                <button type="submit" class="btn btn-primary mt-3">
                                  <i class="fas fa-save"></i> Create ConfigMap
                                </button>
                              </form>
                            </div>
                            
                            <!-- Secret Creation Form -->
                            <div class="tab-pane fade" id="create-secret" role="tabpanel" aria-labelledby="create-secret-tab">
                              <form id="createSecretForm">
                                <div class="row">
                                  <div class="col-md-6">
                                    <div class="form-group">
                                      <label for="secretName">Secret Name</label>
                                      <input type="text" class="form-control" id="secretName" required>
                                      <small class="form-text text-muted">Must be lowercase alphanumeric with dashes</small>
                                    </div>
                                    
                                    <div class="form-group">
                                      <label for="secretNamespace">Namespace</label>
                                      <select class="form-control" id="secretNamespace" required>
                                        <option value="default">default</option>
                                      </select>
                                    </div>
                                  </div>
                                  
                                  <div class="col-md-6">
                                    <div class="form-group">
                                      <label for="secretType">Secret Type</label>
                                      <select class="form-control" id="secretType">
                                        <option value="Opaque">Opaque (generic)</option>
                                        <option value="kubernetes.io/dockerconfigjson">Docker Registry</option>
                                        <option value="kubernetes.io/tls">TLS</option>
                                        <option value="kubernetes.io/basic-auth">Basic Auth</option>
                                        <option value="kubernetes.io/ssh-auth">SSH Auth</option>
                                      </select>
                                    </div>
                                  </div>
                                </div>
                                
                                <div id="secretGenericOptions">
                                  <div class="form-group">
                                    <label>Key-Value Pairs</label>
                                    <div id="secretKeyValuePairs">
                                      <div class="row mb-2">
                                        <div class="col-md-5">
                                          <input type="text" class="form-control" placeholder="Key" name="secretKey">
                                        </div>
                                        <div class="col-md-5">
                                          <input type="password" class="form-control" placeholder="Value" name="secretValue">
                                        </div>
                                        <div class="col-md-2">
                                          <button type="button" class="btn btn-danger btn-sm" onclick="removeSecretPair(this)">
                                            <i class="fas fa-trash"></i>
                                          </button>
                                        </div>
                                      </div>
                                    </div>
                                    <button type="button" class="btn btn-secondary btn-sm mt-2" onclick="addSecretPair()">
                                      <i class="fas fa-plus"></i> Add Pair
                                    </button>
                                  </div>
                                </div>
                                
                                <div id="secretDockerOptions" style="display: none;">
                                  <div class="form-group">
                                    <label for="dockerServer">Docker Registry Server</label>
                                    <input type="text" class="form-control" id="dockerServer" placeholder="https://index.docker.io/v1/">
                                  </div>
                                  <div class="form-group">
                                    <label for="dockerUsername">Username</label>
                                    <input type="text" class="form-control" id="dockerUsername">
                                  </div>
                                  <div class="form-group">
                                    <label for="dockerPassword">Password</label>
                                    <input type="password" class="form-control" id="dockerPassword">
                                  </div>
                                  <div class="form-group">
                                    <label for="dockerEmail">Email</label>
                                    <input type="email" class="form-control" id="dockerEmail">
                                  </div>
                                </div>
                                
                                <div id="secretTLSOptions" style="display: none;">
                                  <div class="form-group">
                                    <label for="tlsCert">Certificate (PEM)</label>
                                    <textarea class="form-control" id="tlsCert" rows="3"></textarea>
                                  </div>
                                  <div class="form-group">
                                    <label for="tlsKey">Private Key (PEM)</label>
                                    <textarea class="form-control" id="tlsKey" rows="3"></textarea>
                                  </div>
                                </div>
                                
                                <div class="form-check mb-3">
                                  <input type="checkbox" class="form-check-input" id="showSecretYamlPreview">
                                  <label class="form-check-label" style="margin-left: 20px;" for="showSecretYamlPreview">Show YAML Preview</label>
                                </div>
                                
                                <div id="secretYamlPreviewContainer" style="display: none;">
                                  <h5>YAML Preview</h5>
                                  <div class="yaml-container">
                                    <pre id="secretYamlPreview"></pre>
                                  </div>
                                </div>
                                
                                <button type="submit" class="btn btn-primary mt-3">
                                  <i class="fas fa-save"></i> Create Secret
                                </button>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          </div>
          <!-- ConfigMap Actions Modals -->
          <div class="modal fade" id="deleteConfigMapModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Delete ConfigMap</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <p>Are you sure you want to delete ConfigMap <strong id="deleteConfigMapName"></strong> in namespace <strong id="deleteConfigMapNamespace"></strong>?</p>
                  <div class="alert alert-warning">
                    <strong>Warning:</strong> This will permanently delete the configuration data.
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                  <button type="button" class="btn btn-danger" id="confirmDeleteConfigMap">Delete</button>
                </div>
              </div>
            </div>
          </div>
          
          <div class="modal fade" id="viewConfigMapYamlModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">ConfigMap YAML</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <div class="yaml-container">
                    <pre id="configMapYaml"></pre>
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                  <button type="button" class="btn btn-primary" id="copyConfigMapYaml">
                    <i class="fas fa-copy"></i> Copy
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <div class="modal fade" id="viewConfigMapDataModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">ConfigMap Data</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <div class="table-responsive">
                    <table class="table table-striped">
                      <thead>
                        <tr>
                          <th>Key</th>
                          <th>Value</th>
                        </tr>
                      </thead>
                      <tbody id="configMapDataBody">
                      </tbody>
                    </table>
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                  <button type="button" class="btn btn-primary" id="downloadConfigMapData">
                    <i class="fas fa-download"></i> Download as File
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Secret Actions Modals -->
          <div class="modal fade" id="deleteSecretModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Delete Secret</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <p>Are you sure you want to delete Secret <strong id="deleteSecretName"></strong> in namespace <strong id="deleteSecretNamespace"></strong>?</p>
                  <div class="alert alert-warning">
                    <strong>Warning:</strong> This will permanently delete the secret data.
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                  <button type="button" class="btn btn-danger" id="confirmDeleteSecret">Delete</button>
                </div>
              </div>
            </div>
          </div>
          
          <div class="modal fade" id="viewSecretYamlModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Secret YAML</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <div class="yaml-container">
                    <pre id="secretYaml"></pre>
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                  <button type="button" class="btn btn-primary" id="copySecretYaml">
                    <i class="fas fa-copy"></i> Copy
                  </button>
                </div>
              </div>
            </div>
          </div>
          
          <div class="modal fade" id="viewSecretDataModal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Secret Data</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div class="modal-body">
                  <div class="table-responsive">
                    <table class="table table-striped">
                      <thead>
                        <tr>
                          <th>Key</th>
                          <th>Value</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody id="secretDataBody">
                      </tbody>
                    </table>
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
              </div>
            </div>
          </div>
    
    <div id="chatbot-container">
        <!-- Chatbot Toggle Button (Circle with Logo) -->
        <div id="chatbot-toggle">
            <img src="../assets/img/dockube3.png" alt="Chatbot Logo" width="50" height="50">
        </div>
      
        <!-- Chatbot Interface (Hidden by Default) -->
       
      <div id="chatbot-interface" style="display: none;">
        <!-- Chat Header -->
        <div id="chat-header">
            <strong>
                <img src="../assets/img/dockube3.png" alt="Logo">
                Docker & Kubernetes Assistant
            </strong>
            <button id="chat-close">×</button>
        </div>
      
        <!-- Chat Body -->
        <div id="chat-body">
            <div id="chat-messages">
                <!-- Welcome Message -->
                <div class="welcome-message" onclick="toggleWelcomeMessage()">
                    👋 Welcome! I'm your Docker & Kubernetes Assistant.
                    Ask me anything about Docker, Kubernetes, and best practices.
                    <div class="hidden-content">
                        Hi! I'm your Docker & Kubernetes Assistant.  
                        Ask me anything about services, Kubernetes configurations, and best practices.
                    </div>
                </div>
            </div>
        </div>
      
        <!-- Chat Input -->
        <div id="chat-input">
            <input type="text" id="chat-message" placeholder="Type your question...">
            <button id="chat-send">Send</button>
        </div>
      </div>
      </div>
      <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatbotToggle = document.getElementById('chatbot-toggle');
            const chatbotInterface = document.getElementById('chatbot-interface');
            const chatClose = document.getElementById('chat-close');
            const chatBody = document.getElementById('chat-body');
            const chatMessages = document.getElementById('chat-messages');
            const chatMessageInput = document.getElementById('chat-message');
            const chatSendButton = document.getElementById('chat-send');
      
            // Toggle Chat Interface
            chatbotToggle.addEventListener('click', () => {
                chatbotInterface.style.display = 'block';
            });
      
            // Close Chat Interface
            chatClose.addEventListener('click', () => {
                chatbotInterface.style.display = 'none';
            });
      
            // Send Message to Chatbot
            chatSendButton.addEventListener('click', async () => {
                const message = chatMessageInput.value.trim();
                if (message) {
                    // Add User Message to Chat
                    chatMessages.innerHTML += `<div class="message"><strong>You:</strong> ${message}</div>`;
                    chatMessageInput.value = '';
      
                    // Show Loading Spinner
                    chatMessages.innerHTML += `<div id="loading-spinner">Loading...</div>`;
      
                    // Call Backend API
                    try {
                        const response = await fetch('/api/chat', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ message })
                        });
                        const data = await response.json();
      
                        // Remove Loading Spinner and Add Bot Response
                        document.getElementById('loading-spinner').remove();
                        chatMessages.innerHTML += `<div class="message"><strong>Assistant:</strong> ${data.response}</div>`;
                    } catch (error) {
                        console.error('Error:', error);
                        chatMessages.innerHTML += `<div class="message"><strong>Error:</strong> Failed to get response.</div>`;
                    }
      
                    // Scroll to Bottom of Chat
                    chatBody.scrollTop = chatBody.scrollHeight;
                }
            });
      
            // Allow Pressing "Enter" to Send a Message
            chatMessageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    chatSendButton.click();
                }
            });
        });
      </script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Complete step information database
    const stepInfo = {
        1: {
            metaphor: "Like building the airport before planes can land",
            whatIs: "The Kubernetes cluster is the foundation that runs your applications. It's the combination of control plane (management) and worker nodes (where workloads run).",
            whyImportant: "Without a cluster, you have nowhere to deploy your applications. This is like having apps but no phone to run them on.",
            visual: '<div class="cluster-visual"><div class="control-plane"><i class="fas fa-cog"></i> Control Plane</div><div class="worker-nodes"><div class="node"><i class="fas fa-server"></i> Node</div><div class="node"><i class="fas fa-server"></i> Node</div></div></div>'
        },
        2: {
            metaphor: "The worker bees in your cluster hive",
            whatIs: "Nodes are the worker machines (VMs or physical servers) that run your applications. They're managed by the control plane and can be added or removed as needed.",
            whyImportant: "More nodes mean more capacity to run applications. Like adding more chefs to a kitchen to handle more orders. Healthy nodes ensure your applications run smoothly.",
            visual: '<div class="nodes-visual"><div class="node healthy"><i class="fas fa-server"></i> Worker 1</div><div class="node healthy"><i class="fas fa-server"></i> Worker 2</div><div class="node warning"><i class="fas fa-server"></i> Worker 3</div></div>'
        },
        3: {
            metaphor: "Like different floors in an office building",
            whatIs: "Namespaces provide virtual clusters within your physical cluster, isolating resources between teams, projects, or environments (dev/test/prod).",
            whyImportant: "Prevents naming collisions and provides logical separation, like having separate departments in a company. Essential for multi-team environments and resource quotas.",
            visual: '<div class="namespaces-visual"><div class="namespace prod"><i class="fas fa-building"></i> Production</div><div class="namespace dev"><i class="fas fa-code"></i> Development</div><div class="namespace test"><i class="fas fa-flask"></i> Testing</div></div>'
        },
        4: {
            metaphor: "The configuration vault of your applications",
            whatIs: "ConfigMaps store configuration data as key-value pairs, while Secrets store sensitive information like passwords and API keys in encrypted form.",
            whyImportant: "Separates configuration from application code, making your applications more portable and secure. Like having a secure filing cabinet separate from your work desk.",
            visual: '<div class="configs-visual"><div class="config"><i class="fas fa-file-alt"></i> ConfigMap<br><small>database.url</small></div><div class="secret"><i class="fas fa-lock"></i> Secret<br><small>db-password</small></div></div>'
        },
        5: {
            metaphor: "Your cluster's permanent storage locker",
            whatIs: "Persistent Volumes (PVs) and Persistent Volume Claims (PVCs) provide durable storage that survives pod restarts, unlike ephemeral container storage.",
            whyImportant: "Essential for stateful applications like databases. Like having a permanent locker in school versus temporary desk space that gets cleared daily.",
            visual: '<div class="storage-visual"><div class="pvc"><i class="fas fa-hdd"></i> PVC Request</div><div class="arrow">→</div><div class="pv"><i class="fas fa-database"></i> PV Storage</div></div>'
        },
        6: {
  metaphor: "The blueprint and foreman for your applications",
  whatIs: "Deployments manage stateless applications with rolling updates, while StatefulSets manage stateful applications with stable identities and ordered operations.",
  whyImportant: "Ensures your applications run with the desired replicas and update strategy. Deployments for stateless apps, StatefulSets for databases and ordered workloads.",
  visual: '<div class="workload-visual">' +
          '<div class="workload-option" data-target="/kubernetes/deployments">' +
          '<i class="fas fa-copy"></i> Deployments' +
          '</div>' +
          '<div class="workload-option" data-target="/kubernetes/statefulsets">' +
          '<i class="fas fa-list-ol"></i> StatefulSets' +
          '</div></div>'
},
        7: {
            metaphor: "The individual hotel rooms for your containers",
            whatIs: "Pods are the smallest deployable units in Kubernetes, containing one or more containers that share storage and network resources.",
            whyImportant: "Your actual running application instances. Like individual hotel rooms that contain all the amenities (containers) needed for a guest (application) to function.",
            visual: '<div class="pods-visual"><div class="pod"><div class="container"><i class="fas fa-box"></i> app</div><div class="container"><i class="fas fa-shield-alt"></i> sidecar</div></div><div class="pod single"><div class="container"><i class="fas fa-box"></i> app</div></div></div>'
        },
        8: {
            metaphor: "The front desk and concierge service",
            whatIs: "Services provide stable IP addresses and DNS names to access groups of pods, and can expose applications internally or to the outside world.",
            whyImportant: "Provides reliable access to your applications even as individual pods come and go. Like having a hotel front desk that always knows which rooms are occupied.",
            visual: '<div class="services-visual"><div class="service"><i class="fas fa-exchange-alt"></i> ClusterIP</div><div class="service"><i class="fas fa-sign-out-alt"></i> NodePort</div><div class="service"><i class="fas fa-globe"></i> LoadBalancer</div></div>'
        },
         9: {
        metaphor: "The gateway and traffic controller",
        whatIs: "Ingress manages external access to your services, typically HTTP/HTTPS, with host and path-based routing rules. It acts as a smart router for your cluster.",
        whyImportant: "Provides a single entry point for multiple services, enables name-based virtual hosting, and can handle SSL termination. Like having a receptionist who directs visitors to the right department.",
        visual: '<div class="ingress-visual"><div class="ingress"><i class="fas fa-globe"></i> Ingress</div><div class="arrows">⇩ ⇩ ⇩</div><div class="services-visual"><div class="service"><i class="fas fa-exchange-alt"></i> Service A</div><div class="service"><i class="fas fa-exchange-alt"></i> Service B</div><div class="service"><i class="fas fa-exchange-alt"></i> Service C</div></div></div>'
    }
    };

    // Initialize the stepper
    const steps = document.querySelectorAll('.stepper-steps .step');
    const progressBar = document.querySelector('.stepper-progress-bar');
    const currentPath = window.location.pathname;
    let currentStepIndex = 0;
    
    // Set total steps counter
    document.getElementById('totalSteps').textContent = steps.length;
    
   // Find current step based on URL
steps.forEach((step, index) => {
    const stepRoute = step.getAttribute('data-route');
    // Check for both deployments and statefulsets under step 6
    if (currentPath.includes(stepRoute) || 
        (index === 5 && (currentPath.includes('/kubernetes/deployments') || 
                        currentPath.includes('/kubernetes/statefulsets')))) {
        currentStepIndex = index;
        activateStep(step, index + 1);
    }
    
    // Add click handler
    step.addEventListener('click', function() {
        navigateToStep(index);
    });
});
    
    // Next/Previous button handlers
    document.getElementById('nextStepBtn').addEventListener('click', function() {
        if (currentStepIndex < steps.length - 1) {
            navigateToStep(currentStepIndex + 1);
        }
    });
    
    document.getElementById('prevStepBtn').addEventListener('click', function() {
        if (currentStepIndex > 0) {
            navigateToStep(currentStepIndex - 1);
        }
    });
    
    // Update the navigateToStep function
function navigateToStep(index) {
  const step = steps[index];
  let route = step.getAttribute('data-route');
  
  // Special handling for Workloads step
  if (index === 5) { // Step 6 is index 5 (0-based)
      // Default to Deployments if coming from previous step
      if (currentStepIndex < index) {
          route = "/kubernetes/deployments";
      } 
      // If coming from next step, go to StatefulSets
      else if (currentStepIndex > index) {
          route = "/kubernetes/statefulsets";
      }
  }
  
  window.location.href = route;
}
    
function activateStep(step, stepNumber) {
    // Update UI
    steps.forEach(s => {
        s.classList.remove('active', 'completed');
        const sNumber = parseInt(s.getAttribute('data-step'));
        if (sNumber < stepNumber) {
            s.classList.add('completed');
        }
    });
    
    step.classList.add('active');
    
    // Update progress bar
    const progressPercentage = ((stepNumber - 1) / (steps.length - 1)) * 100;
    progressBar.style.width = `${progressPercentage}%`;
    
    // Update step counter
    document.getElementById('currentStepNumber').textContent = stepNumber;
    
    // Update explanation panel
    if (stepInfo[stepNumber]) {
        // Special handling for Workloads step
        if (stepNumber === 6) {
            if (window.location.pathname.includes('/kubernetes/statefulsets')) {
                document.getElementById('currentStepMetaphor').textContent = "The specialized blueprint for stateful applications";
                document.getElementById('whatIsThis').textContent = "StatefulSets manage stateful applications that need stable network identities, persistent storage, and ordered deployment/scaling.";
                document.getElementById('whyImportant').textContent = "Essential for databases and other stateful applications where pod order and persistence matter. Like having numbered parking spots where each car always gets the same spot.";
                document.querySelector('.visual-placeholder').innerHTML = '<div class="statefulset-visual"><div class="pod"><i class="fas fa-database"></i> db-0</div><div class="pod"><i class="fas fa-database"></i> db-1</div><div class="pod"><i class="fas fa-database"></i> db-2</div></div>';
            } else {
                // Default to Deployments view
                document.getElementById('currentStepMetaphor').textContent = stepInfo[stepNumber].metaphor;
                document.getElementById('whatIsThis').textContent = stepInfo[stepNumber].whatIs;
                document.getElementById('whyImportant').textContent = stepInfo[stepNumber].whyImportant;
                document.querySelector('.visual-placeholder').innerHTML = stepInfo[stepNumber].visual;
            }
        } else {
            // Normal step handling
            document.getElementById('currentStepMetaphor').textContent = stepInfo[stepNumber].metaphor;
            document.getElementById('whatIsThis').textContent = stepInfo[stepNumber].whatIs;
            document.getElementById('whyImportant').textContent = stepInfo[stepNumber].whyImportant;
            document.querySelector('.visual-placeholder').innerHTML = stepInfo[stepNumber].visual;
        }
    }
    
    // Add click handlers for workload options
    if (stepNumber === 6) {
        document.querySelectorAll('.workload-option').forEach(option => {
            option.addEventListener('click', function(e) {
                e.stopPropagation();
                window.location.href = this.getAttribute('data-target');
            });
        });
    }
    
    // Update navigation buttons
    document.getElementById('prevStepBtn').disabled = stepNumber === 1;
    document.getElementById('nextStepBtn').disabled = stepNumber === steps.length;
}
});
</script>


      <script src="https://cdn.jsdelivr.net/npm/xterm@5.3.0/lib/xterm.min.js"></script>
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/xterm@5.3.0/css/xterm.min.css" />
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

      <script>
        // Global variables for current context
        let currentConfigMapName = '';
        let currentConfigMapNamespace = '';
        let currentSecretName = '';
        let currentSecretNamespace = '';
        
        document.addEventListener('DOMContentLoaded', function() {
          // Load initial data
          loadNamespaces();
          loadConfigMaps();
          loadSecrets();
          
          // ConfigMap event listeners
          document.getElementById('refreshConfigMaps').addEventListener('click', loadConfigMaps);
          document.getElementById('configmapNamespaceFilter').addEventListener('change', loadConfigMaps);
          document.getElementById('confirmDeleteConfigMap').addEventListener('click', function() {
            deleteConfigMap(currentConfigMapName, currentConfigMapNamespace);
            $('#deleteConfigMapModal').modal('hide');
          });
          document.getElementById('copyConfigMapYaml').addEventListener('click', function() {
            const yamlText = document.getElementById('configMapYaml').textContent;
            navigator.clipboard.writeText(yamlText).then(() => {
              Swal.fire('Success!', 'YAML copied to clipboard!', 'success');
            });
          });
          document.getElementById('downloadConfigMapData').addEventListener('click', downloadConfigMapData);
          
          // Secret event listeners
          document.getElementById('refreshSecrets').addEventListener('click', loadSecrets);
          document.getElementById('secretNamespaceFilter').addEventListener('change', loadSecrets);
          document.getElementById('confirmDeleteSecret').addEventListener('click', function() {
            deleteSecret(currentSecretName, currentSecretNamespace);
            $('#deleteSecretModal').modal('hide');
          });
          document.getElementById('copySecretYaml').addEventListener('click', function() {
            const yamlText = document.getElementById('secretYaml').textContent;
            navigator.clipboard.writeText(yamlText).then(() => {
              Swal.fire('Success!', 'YAML copied to clipboard!', 'success');
            });
          });
          
          // ConfigMap form event listeners
          document.getElementById('configmapType').addEventListener('change', function() {
            document.getElementById('configmapManualEntry').style.display = 'none';
            document.getElementById('configmapFileUpload').style.display = 'none';
            document.getElementById('configmapEnvFileUpload').style.display = 'none';
            
            if (this.value === 'manual') {
              document.getElementById('configmapManualEntry').style.display = 'block';
            } else if (this.value === 'file') {
              document.getElementById('configmapFileUpload').style.display = 'block';
            } else if (this.value === 'envfile') {
              document.getElementById('configmapEnvFileUpload').style.display = 'block';
            }
            
            updateConfigMapYamlPreview();
          });
          
          document.getElementById('showConfigMapYamlPreview').addEventListener('change', function() {
            const yamlContainer = document.getElementById('configmapYamlPreviewContainer');
            yamlContainer.style.display = this.checked ? 'block' : 'none';
            if (this.checked) {
              updateConfigMapYamlPreview();
            }
          });
          
          document.getElementById('createConfigMapForm').addEventListener('submit', function(e) {
            e.preventDefault();
            createConfigMap();
          });
          
          // Secret form event listeners
          document.getElementById('secretType').addEventListener('change', function() {
            document.getElementById('secretGenericOptions').style.display = 'none';
            document.getElementById('secretDockerOptions').style.display = 'none';
            document.getElementById('secretTLSOptions').style.display = 'none';
            
            if (this.value === 'Opaque') {
              document.getElementById('secretGenericOptions').style.display = 'block';
            } else if (this.value === 'kubernetes.io/dockerconfigjson') {
              document.getElementById('secretDockerOptions').style.display = 'block';
            } else if (this.value === 'kubernetes.io/tls') {
              document.getElementById('secretTLSOptions').style.display = 'block';
            }
            
            updateSecretYamlPreview();
          });
          
          document.getElementById('showSecretYamlPreview').addEventListener('change', function() {
            const yamlContainer = document.getElementById('secretYamlPreviewContainer');
            yamlContainer.style.display = this.checked ? 'block' : 'none';
            if (this.checked) {
              updateSecretYamlPreview();
            }
          });
          
          document.getElementById('createSecretForm').addEventListener('submit', function(e) {
            e.preventDefault();
            createSecret();
          });
          
          // Input change listeners for YAML preview
          document.querySelectorAll('#createConfigMapForm input, #createConfigMapForm select, #createConfigMapForm textarea').forEach(element => {
            element.addEventListener('input', updateConfigMapYamlPreview);
            element.addEventListener('change', updateConfigMapYamlPreview);
          });
          
          document.querySelectorAll('#createSecretForm input, #createSecretForm select, #createSecretForm textarea').forEach(element => {
            element.addEventListener('input', updateSecretYamlPreview);
            element.addEventListener('change', updateSecretYamlPreview);
          });
        });
        
        // ConfigMap functions
        function loadConfigMaps() {
          const namespaceFilter = document.getElementById('configmapNamespaceFilter').value;
          const configmapTableBody = document.getElementById('configmapTableBody');
          
          configmapTableBody.innerHTML = `
            <tr>
              <td colspan="5" class="text-center">
                <div class="spinner-border text-primary" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
                <p>Loading ConfigMaps...</p>
              </td>
            </tr>
          `;
          
          let apiUrl = '/kubernetes/configmaps';
          if (namespaceFilter) {
            apiUrl += `?namespace=${namespaceFilter}`;
          }
          
          fetch(apiUrl)
          .then(response => response.json())
          .then(data => {
            if (data.items && data.items.length > 0) {
              configmapTableBody.innerHTML = data.items.map(configmap => {
                const dataCount = configmap.data ? Object.keys(configmap.data).length : 0;
                const age = timeSince(new Date(configmap.metadata.creationTimestamp));
                
                return `
                  <tr>
                    <td>${configmap.metadata.name}</td>
                    <td>${configmap.metadata.namespace}</td>
                    <td>${dataCount}</td>
                    <td>${age}</td>
                    <td>
                  <div class="action-buttons">
                  <button class="action-btn btn-yaml" 
                    onclick="viewConfigMapData('${configmap.metadata.name}', '${configmap.metadata.namespace}')"
                    data-tooltip="View ConfigMap data">
                     <i class="fas fa-eye"></i> View
                    </button>
                     <button class="action-btn btn-yaml" 
                      onclick="showConfigMapYaml('${configmap.metadata.name}', '${configmap.metadata.namespace}')"
                        data-tooltip="View YAML configuration">
                        <i class="fas fa-code"></i> YAML
                        </button>
                           <button class="action-btn btn-delete" 
            onclick="showDeleteConfigMapModal('${configmap.metadata.name}', '${configmap.metadata.namespace}')"
            data-tooltip="Delete this ConfigMap">
      <i class="fas fa-trash-alt"></i> Delete
    </button>
  </div>
</td>
                  </tr>
                `;
              }).join('');
            } else {
              configmapTableBody.innerHTML = `
                <tr>
                  <td colspan="5" class="text-center">No ConfigMaps found</td>
                </tr>
              `;
            }
          })
          .catch(error => {
            configmapTableBody.innerHTML = `
              <tr>
                <td colspan="5" class="text-center text-danger">Error loading ConfigMaps: ${error.message}</td>
              </tr>
            `;
          });
        }
        
        function showDeleteConfigMapModal(name, namespace) {
          currentConfigMapName = name;
          currentConfigMapNamespace = namespace;
          
          document.getElementById('deleteConfigMapName').textContent = name;
          document.getElementById('deleteConfigMapNamespace').textContent = namespace;
          
          $('#deleteConfigMapModal').modal('show');
        }
        
        function showConfigMapYaml(name, namespace) {
          fetch(`/kubernetes/configmaps/yaml?name=${name}&namespace=${namespace}`)
          .then(response => response.json())
          .then(data => {
            if (data.yaml) {
              document.getElementById('configMapYaml').textContent = data.yaml;
              $('#viewConfigMapYamlModal').modal('show');
            } else {
              Swal.fire('Error!', `Error loading YAML: ${data.error}`, 'error');
            }
          })
          .catch(error => {
            Swal.fire('Error!', `Error loading YAML: ${error.message}`, 'error');
          });
        }
        
        function viewConfigMapData(name, namespace) {
          fetch(`/kubernetes/configmaps/data?name=${name}&namespace=${namespace}`)
          .then(response => response.json())
          .then(data => {
            if (data.data) {
              const dataBody = document.getElementById('configMapDataBody');
              dataBody.innerHTML = '';
              
              for (const [key, value] of Object.entries(data.data)) {
                dataBody.innerHTML += `
                  <tr>
                    <td>${key}</td>
                    <td><pre class="mb-0">${value}</pre></td>
                  </tr>
                `;
              }
              
              currentConfigMapName = name;
              currentConfigMapNamespace = namespace;
              $('#viewConfigMapDataModal').modal('show');
            } else {
              Swal.fire('Error!', `Error loading ConfigMap data: ${data.error}`, 'error');
            }
          })
          .catch(error => {
            Swal.fire('Error!', `Error loading ConfigMap data: ${error.message}`, 'error');
          });
        }
        
        function downloadConfigMapData() {
          const dataRows = document.querySelectorAll('#configMapDataBody tr');
          let dataContent = '';
          
          dataRows.forEach(row => {
            const key = row.querySelector('td:first-child').textContent;
            const value = row.querySelector('td:last-child pre').textContent;
            dataContent += `${key}=${value}\n`;
          });
          
          const blob = new Blob([dataContent], { type: 'text/plain' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `${currentConfigMapName}.env`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        }
        
        function deleteConfigMap(name, namespace) {
          Swal.fire({
            title: 'Deleting ConfigMap',
            text: `Deleting ConfigMap ${name}...`,
            icon: 'info',
            showConfirmButton: false,
            timer: 2000
          });
          
          fetch('/kubernetes/configmaps/delete', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              name,
              namespace
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Success!', `ConfigMap ${name} deleted`, 'success');
              loadConfigMaps();
            } else {
              Swal.fire('Error!', `Error deleting ConfigMap: ${data.error}`, 'error');
            }
          })
          .catch(error => {
            Swal.fire('Error!', `Error deleting ConfigMap: ${error.message}`, 'error');
          });
        }
        
        function addConfigMapPair() {
          const container = document.getElementById('configmapKeyValuePairs');
          const newPair = document.createElement('div');
          newPair.className = 'row mb-2';
          newPair.innerHTML = `
            <div class="col-md-5">
              <input type="text" class="form-control" placeholder="Key" name="configmapKey">
            </div>
            <div class="col-md-5">
              <input type="text" class="form-control" placeholder="Value" name="configmapValue">
            </div>
            <div class="col-md-2">
              <button type="button" class="btn btn-danger btn-sm" onclick="removeConfigMapPair(this)">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          `;
          container.appendChild(newPair);
          updateConfigMapYamlPreview();
        }
        
        function removeConfigMapPair(button) {
          button.closest('.row').remove();
          updateConfigMapYamlPreview();
        }
        
        function updateConfigMapYamlPreview() {
          const configmapName = document.getElementById('configmapName').value || 'example-configmap';
          const namespace = document.getElementById('configmapNamespace').value || 'default';
          const creationMethod = document.getElementById('configmapType').value;
          
          let yaml = `apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${configmapName}
    namespace: ${namespace}
  `;
          
          if (creationMethod === 'manual') {
            const keyValuePairs = [];
            document.querySelectorAll('#configmapKeyValuePairs .row').forEach(row => {
              const key = row.querySelector('input[name="configmapKey"]').value;
              const value = row.querySelector('input[name="configmapValue"]').value;
              if (key) {
                keyValuePairs.push(`  ${key}: ${value}`);
              }
            });
            
            if (keyValuePairs.length > 0) {
              yaml += `data:\n${keyValuePairs.join('\n')}\n`;
            }
          } else if (creationMethod === 'file') {
            yaml += `# Data will be populated from uploaded file\n`;
          } else if (creationMethod === 'envfile') {
            yaml += `# Data will be populated from uploaded env file\n`;
          }
          
          document.getElementById('configmapYamlPreview').textContent = yaml;
        }
        
       async function createConfigMap() {
  const name = document.getElementById('configmapName').value.trim();
  const namespace = document.getElementById('configmapNamespace').value;
  const type = document.getElementById('configmapType').value;

  // Validate inputs
  if (!name || !namespace || !type) {
    Swal.fire('Error', 'All fields are required', 'error');
    return;
  }

  try {
    let data = {};
    const headers = {
      'Content-Type': 'application/json'
    };

    if (type === 'manual') {
      // Collect manual key-value pairs
      const pairs = {};
      document.querySelectorAll('#configmapKeyValuePairs .row').forEach(row => {
        const key = row.querySelector('input[name="configmapKey"]').value.trim();
        const value = row.querySelector('input[name="configmapValue"]').value;
        if (key) pairs[key] = value;
      });
      data = { name, namespace, type, data: pairs };
    } 
    else if (type === 'file') {
      const fileInput = document.getElementById('configmapFile');
      if (!fileInput.files.length) {
        Swal.fire('Error', 'Please select a file', 'error');
        return;
      }
      
      const formData = new FormData();
      formData.append('name', name);
      formData.append('namespace', namespace);
      formData.append('type', type);
      formData.append('file', fileInput.files[0]);
      
      return fetch('/kubernetes/configmaps/create', {
        method: 'POST',
        body: formData
      }).then(handleResponse);
    }
    else if (type === 'envfile') {
      // Handle env file upload
      const fileInput = document.getElementById('configmapEnvFile');
      if (!fileInput.files.length) {
        Swal.fire('Error', 'Please select an env file', 'error');
        return;
      }
      
      const formData = new FormData();
      formData.append('name', name);
      formData.append('namespace', namespace);
      formData.append('type', type);
      formData.append('envfile', fileInput.files[0]);
      
      return fetch('/kubernetes/configmaps/create', {
        method: 'POST',
        body: formData
      }).then(handleResponse);
    }

    // For manual entry
    const response = await fetch('/kubernetes/configmaps/create', {
      method: 'POST',
      headers: headers,
      body: JSON.stringify(data)
    });

    await handleResponse(response);
  } catch (error) {
    console.error('Error:', error);
    Swal.fire('Error', `Failed to create ConfigMap: ${error.message}`, 'error');
  }
}

async function handleResponse(response) {
  const data = await response.json();
  if (!response.ok) {
    throw new Error(data.error || 'Unknown error occurred');
  }
  
  if (data.success) {
    Swal.fire('Success!', 'ConfigMap created successfully', 'success');
    // Reset form and reload data
    document.getElementById('createConfigMapForm').reset();
    loadConfigMaps();
  } else {
    throw new Error(data.error || 'Creation failed');
  }
}

// Secret functions
        function loadSecrets() {
          const namespaceFilter = document.getElementById('secretNamespaceFilter').value;
          const secretTableBody = document.getElementById('secretTableBody');
          
          secretTableBody.innerHTML = `
            <tr>
              <td colspan="6" class="text-center">
                <div class="spinner-border text-primary" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
                <p>Loading Secrets...</p>
              </td>
            </tr>
          `;
          
          let apiUrl = '/kubernetes/secrets';
          if (namespaceFilter) {
            apiUrl += `?namespace=${namespaceFilter}`;
          }
          
          fetch(apiUrl)
          .then(response => response.json())
          .then(data => {
            if (data.items && data.items.length > 0) {
              secretTableBody.innerHTML = data.items.map(secret => {
                const dataCount = secret.data ? Object.keys(secret.data).length : 0;
                const age = timeSince(new Date(secret.metadata.creationTimestamp));
                
                return `
                  <tr>
                    <td>${secret.metadata.name}</td>
                    <td>${secret.metadata.namespace}</td>
                    <td>${secret.type || 'Opaque'}</td>
                    <td>${dataCount}</td>
                    <td>${age}</td>
                    <td>
  <div class="action-buttons">
    <button class="action-btn btn-yaml" 
            onclick="viewSecretData('${secret.metadata.name}', '${secret.metadata.namespace}')"
            data-tooltip="View Secret data">
      <i class="fas fa-eye"></i> View
    </button>
    <button class="action-btn btn-yaml" 
            onclick="showSecretYaml('${secret.metadata.name}', '${secret.metadata.namespace}')"
            data-tooltip="View YAML configuration">
      <i class="fas fa-code"></i> YAML
    </button>
    <button class="action-btn btn-delete" 
            onclick="showDeleteSecretModal('${secret.metadata.name}', '${secret.metadata.namespace}')"
            data-tooltip="Delete this Secret">
      <i class="fas fa-trash-alt"></i> Delete
    </button>
  </div>
</td>
                  </tr>
                `;
              }).join('');
            } else {
              secretTableBody.innerHTML = `
                <tr>
                  <td colspan="6" class="text-center">No Secrets found</td>
                </tr>
              `;
            }
          })
          .catch(error => {
            secretTableBody.innerHTML = `
              <tr>
                <td colspan="6" class="text-center text-danger">Error loading Secrets: ${error.message}</td>
              </tr>
            `;
          });
        }
        
        function showDeleteSecretModal(name, namespace) {
          currentSecretName = name;
          currentSecretNamespace = namespace;
          
          document.getElementById('deleteSecretName').textContent = name;
          document.getElementById('deleteSecretNamespace').textContent = namespace;
          
          $('#deleteSecretModal').modal('show');
        }
        
        function showSecretYaml(name, namespace) {
          fetch(`/kubernetes/secrets/yaml?name=${name}&namespace=${namespace}`)
          .then(response => response.json())
          .then(data => {
            if (data.yaml) {
              document.getElementById('secretYaml').textContent = data.yaml;
              $('#viewSecretYamlModal').modal('show');
            } else {
              Swal.fire('Error!', `Error loading YAML: ${data.error}`, 'error');
            }
          })
          .catch(error => {
            Swal.fire('Error!', `Error loading YAML: ${error.message}`, 'error');
          });
        }
        
        function viewSecretData(name, namespace) {
          fetch(`/kubernetes/secrets/data?name=${name}&namespace=${namespace}`)
          .then(response => response.json())
          .then(data => {
            if (data.data) {
              const dataBody = document.getElementById('secretDataBody');
              dataBody.innerHTML = '';
              
              for (const [key, value] of Object.entries(data.data)) {
                dataBody.innerHTML += `
                  <tr>
                    <td>${key}</td>
                    <td>********</td>
                    <td>
                      <button class="btn btn-sm btn-outline-secondary" onclick="revealSecretValue(this, '${value}')">
                        <i class="fas fa-eye"></i> Reveal
                      </button>
                    </td>
                  </tr>
                `;
              }
              
              currentSecretName = name;
              currentSecretNamespace = namespace;
              $('#viewSecretDataModal').modal('show');
            } else {
              Swal.fire('Error!', `Error loading Secret data: ${data.error}`, 'error');
            }
          })
          .catch(error => {
            Swal.fire('Error!', `Error loading Secret data: ${error.message}`, 'error');
          });
        }
        
        function revealSecretValue(button, encodedValue) {
          try {
            const decodedValue = atob(encodedValue);
            const valueCell = button.closest('tr').querySelector('td:nth-child(2)');
            valueCell.textContent = decodedValue;
            button.disabled = true;
          } catch (error) {
            Swal.fire('Error!', 'Error decoding secret value', 'error');
          }
        }
        
        function deleteSecret(name, namespace) {
          Swal.fire({
            title: 'Deleting Secret',
            text: `Deleting Secret ${name}...`,
            icon: 'info',
            showConfirmButton: false,
            timer: 2000
          });
          
          fetch('/kubernetes/secrets/delete', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              name,
              namespace
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Success!', `Secret ${name} deleted`, 'success');
              loadSecrets();
            } else {
              Swal.fire('Error!', `Error deleting Secret: ${data.error}`, 'error');
            }
          })
          .catch(error => {
            Swal.fire('Error!', `Error deleting Secret: ${error.message}`, 'error');
          });
        }
        
        function addSecretPair() {
          const container = document.getElementById('secretKeyValuePairs');
          const newPair = document.createElement('div');
          newPair.className = 'row mb-2';
          newPair.innerHTML = `
            <div class="col-md-5">
              <input type="text" class="form-control" placeholder="Key" name="secretKey">
            </div>
            <div class="col-md-5">
              <input type="password" class="form-control" placeholder="Value" name="secretValue">
            </div>
            <div class="col-md-2">
              <button type="button" class="btn btn-danger btn-sm" onclick="removeSecretPair(this)">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          `;
          container.appendChild(newPair);
          updateSecretYamlPreview();
        }
        
        function removeSecretPair(button) {
          button.closest('.row').remove();
          updateSecretYamlPreview();
        }
        
        function updateSecretYamlPreview() {
          const secretName = document.getElementById('secretName').value || 'example-secret';
          const namespace = document.getElementById('secretNamespace').value || 'default';
          const secretType = document.getElementById('secretType').value;
          
          let yaml = `apiVersion: v1
  kind: Secret
  metadata:
    name: ${secretName}
    namespace: ${namespace}
  type: ${secretType}
  `;
          
          if (secretType === 'Opaque') {
            const keyValuePairs = [];
            document.querySelectorAll('#secretKeyValuePairs .row').forEach(row => {
              const key = row.querySelector('input[name="secretKey"]').value;
              const value = row.querySelector('input[name="secretValue"]').value;
              if (key) {
                keyValuePairs.push(`  ${key}: ${btoa(value)}`);
              }
            });
            
            if (keyValuePairs.length > 0) {
              yaml += `data:\n${keyValuePairs.join('\n')}\n`;
            }
          } else if (secretType === 'kubernetes.io/dockerconfigjson') {
            const server = document.getElementById('dockerServer').value || 'https://index.docker.io/v1/';
            const username = document.getElementById('dockerUsername').value || '';
            const password = document.getElementById('dockerPassword').value || '';
            const email = document.getElementById('dockerEmail').value || '';
            
            const auth = btoa(`${username}:${password}`);
            const dockerConfig = {
              auths: {
                [server]: {
                  username: username,
                  password: password,
                  email: email,
                  auth: auth
                }
              }
            };
            
            yaml += `data:\n  .dockerconfigjson: ${btoa(JSON.stringify(dockerConfig))}\n`;
          } else if (secretType === 'kubernetes.io/tls') {
            const cert = document.getElementById('tlsCert').value || '';
            const key = document.getElementById('tlsKey').value || '';
            
            if (cert && key) {
              yaml += `data:\n  tls.crt: ${btoa(cert)}\n  tls.key: ${btoa(key)}\n`;
            }
          }
          
          document.getElementById('secretYamlPreview').textContent = yaml;
        }
        
        async function createSecret() {
  const name = document.getElementById('secretName').value.trim();
  const namespace = document.getElementById('secretNamespace').value;
  const type = document.getElementById('secretType').value;

  if (!name || !namespace || !type) {
    Swal.fire('Error', 'All fields are required', 'error');
    return;
  }

  try {
    let secretData = { name, namespace, type };

    if (type === 'Opaque') {
      // Generic secret
      const data = {};
      document.querySelectorAll('#secretKeyValuePairs .row').forEach(row => {
        const key = row.querySelector('input[name="secretKey"]').value.trim();
        const value = row.querySelector('input[name="secretValue"]').value;
        if (key) data[key] = btoa(value); // Base64 encode values
      });
      secretData.data = data;
    }
    else if (type === 'kubernetes.io/dockerconfigjson') {
      // Docker registry secret
      const auth = {
        username: document.getElementById('dockerUsername').value,
        password: document.getElementById('dockerPassword').value,
        email: document.getElementById('dockerEmail').value,
        server: document.getElementById('dockerServer').value || 'https://index.docker.io/v1/'
      };
      
      secretData.data = {
        '.dockerconfigjson': btoa(JSON.stringify({
          auths: {
            [auth.server]: {
              username: auth.username,
              password: auth.password,
              email: auth.email,
              auth: btoa(`${auth.username}:${auth.password}`)
            }
          }
        }))
      };
    }
    else if (type === 'kubernetes.io/tls') {
      // TLS secret
      secretData.data = {
        'tls.crt': btoa(document.getElementById('tlsCert').value),
        'tls.key': btoa(document.getElementById('tlsKey').value)
      };
    }

    const response = await fetch('/kubernetes/secrets/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(secretData)
    });

    const result = await response.json();
    
    if (response.ok && result.success) {
      Swal.fire('Success!', 'Secret created successfully', 'success');
      // Reset form
      document.getElementById('createSecretForm').reset();
      loadSecrets();
    } else {
      throw new Error(result.error || 'Failed to create secret');
    }
  } catch (error) {
    console.error('Error creating secret:', error);
    Swal.fire('Error', `Failed to create secret: ${error.message}`, 'error');
  }
}
        // Utility functions
        function timeSince(date) {
          const seconds = Math.floor((new Date() - date) / 1000);
          
          let interval = Math.floor(seconds / 31536000);
          if (interval >= 1) return `${interval}y`;
          
          interval = Math.floor(seconds / 2592000);
          if (interval >= 1) return `${interval}mo`;
          
          interval = Math.floor(seconds / 86400);
          if (interval >= 1) return `${interval}d`;
          
          interval = Math.floor(seconds / 3600);
          if (interval >= 1) return `${interval}h`;
          
          interval = Math.floor(seconds / 60);
          if (interval >= 1) return `${interval}m`;
          
          return `${Math.floor(seconds)}s`;
        }
        
         function loadNamespaces() {
  fetch('http://localhost:5000//kubernetes/namespaces')
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to fetch namespaces');
      }
      return response.json();
    })
    .then(data => {
      if (data.items && data.items.length > 0) {
        const namespaceElements = [
          document.getElementById('configmapNamespace'),
          document.getElementById('secretNamespace'),
          document.getElementById('configmapNamespaceFilter'),
          document.getElementById('secretNamespaceFilter')
        ];

        // Clear existing options except the first one
        namespaceElements.forEach(select => {
          while (select.options.length > 1) {
            select.remove(1);
          }
        });

        // Add new options
        data.items.forEach(ns => {
          const namespace = ns.metadata?.name;
          if (namespace && namespace !== 'default') {
            namespaceElements.forEach(select => {
              const option = document.createElement('option');
              option.value = namespace;
              option.textContent = namespace;
              select.appendChild(option.cloneNode(true));
            });
          }
        });
      }
    })
    .catch(error => {
      console.error('Error loading namespaces:', error);
      // Show error to user
      Swal.fire('Error', 'Failed to load namespaces. Please try again.', 'error');
    });
}
     
    </script>

    <!--   Core JS Files   -->
    <script src="../assets/js/core/jquery-3.7.1.min.js"></script>
    <script src="../assets/js/core/popper.min.js"></script>
    <script src="../assets/js/core/bootstrap.min.js"></script>

    <!-- jQuery Scrollbar -->
    <script src="../assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js"></script>

    <!-- Chart JS -->
    <script src="../assets/js/plugin/chart.js/chart.min.js"></script>

    <!-- jQuery Sparkline -->
    <script src="../assets/js/plugin/jquery.sparkline/jquery.sparkline.min.js"></script>

    <!-- Chart Circle -->
    <script src="../assets/js/plugin/chart-circle/circles.min.js"></script>

    <!-- Datatables -->
    <script src="../assets/js/plugin/datatables/datatables.min.js"></script>

    <!-- Bootstrap Notify -->
    <script src="../assets/js/plugin/bootstrap-notify/bootstrap-notify.min.js"></script>

    <!-- jQuery Vector Maps -->
    <script src="../assets/js/plugin/jsvectormap/jsvectormap.min.js"></script>
    <script src="../assets/js/plugin/jsvectormap/world.js"></script>

    <!-- Google Maps Plugin -->
    <script src="../assets/js/plugin/gmaps/gmaps.js"></script>

    <!-- Sweet Alert -->
    <script src="../assets/js/plugin/sweetalert/sweetalert.min.js"></script>

    <!-- Kaiadmin JS -->
    <script src="../assets/js/kaiadmin.min.js"></script>

    <!-- Kaiadmin DEMO methods, don't include it in your project! -->
    <script src="../assets/js/setting-demo2.js"></script>
	<script src="/assets/js/script.js"></script>
  <script>
    function logout() {
            Swal.fire({
                title: 'Logout Confirmation',
                text: 'Are you sure you want to log out?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#326ce5',
                cancelButtonColor: '#ff6666',
                confirmButtonText: 'Yes, log out'
            }).then((result) => {
                if (result.isConfirmed) {
                    localStorage.clear();
                    window.location.replace("/login");
                }
            });
        }
  </script>
<script>
  function recherche() {
    var input, filter, items, item, name, i, txtValue;
    input = document.getElementById("searchInput"); // Use the correct input ID
    filter = input.value.toUpperCase();
    items = document.getElementsByClassName("service-item"); // Target list items

    for (i = 0; i < items.length; i++) {
        item = items[i];
        name = item.querySelector(".service-name"); // Target the service name
        if (name) {
            txtValue = name.textContent || name.innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                item.style.display = "flex"; // Show the item (flex for the list layout)
            } else {
                item.style.display = "none"; // Hide the item
            }
        }
    }
  }
</script>
</body>

</html>




