<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Docker Compose</title>
    <meta content="width=device-width, initial-scale=1.0, shrink-to-fit=no" name="viewport" />
    <link rel="icon" href="../assets/img/dockube3.png" type="image/x-icon" />
    <!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.27/dist/sweetalert2.min.css">
<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.27/dist/sweetalert2.all.min.js"></script>
<link rel="stylesheet" href="../assets/css/compose.css">



    <!-- Fonts and icons -->
    <script src="../assets/js/plugin/webfont/webfont.min.js"></script>
    <script>
      WebFont.load({
        google: { families: ["Public Sans:300,400,500,600,700"] },
        custom: {
          families: [
            "Font Awesome 5 Solid",
            "Font Awesome 5 Regular",
            "Font Awesome 5 Brands",
            "simple-line-icons",
          ],
          urls: ["../assets/css/fonts.min.css"],
        },
        active: function () {
          sessionStorage.fonts = true;
        },
      });
    </script>
    <!-- CSS Files -->
    <link rel="stylesheet" href="../assets/css/bootstrap.min.css" />
    <link rel="stylesheet" href="../assets/css/plugins.min.css" />
    <link rel="stylesheet" href="../assets/css/kaiadmin.min.css" />
    <!-- CSS Just for demo purpose, don't include it in your project -->
    
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

    <link rel="stylesheet" href="../assets/css/demo.css" />
  </head>
  <body>
    <div class="wrapper">
      <!-- Sidebar -->
      <div class="sidebar" data-background-color="dark">
          <div class="sidebar-logo">
              <!-- Logo Header -->
              <div class="logo-header" data-background-color="dark">
                  <a href="/" class="logo" style="display: flex; align-items: center;">
                      <img src="assets/img/dockube3.png" alt="navbar brand" class="navbar-brand" height="40" />
                      <span style="margin-left: 8px; font-size: 1.2em; font-weight: bold; color: aliceblue;">Dockube Pilot</span>
                  </a>
                  <div class="nav-toggle">
                      <button class="btn btn-toggle toggle-sidebar">
                          <i class="gg-menu-right"></i>
                      </button>
                      <button class="btn btn-toggle sidenav-toggler">
                          <i class="gg-menu-left"></i>
                      </button>
                  </div>
                  <button class="topbar-toggler more">
                      <i class="gg-more-vertical-alt"></i>
                  </button>
              </div>
              <!-- End Logo Header -->
          </div>
          <div class="sidebar-wrapper scrollbar scrollbar-inner">
            <div class="sidebar-content">
              <ul class="nav nav-secondary">
                <li class="nav-item">
                  <a href="/" aria-expanded="false">
                    <i class="fas fa-tachometer-alt"></i> <!-- Dashboard icon -->
                    <p>Dashboard</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockerRegistries">
                    <i class="fas fa-warehouse"></i> <!-- Registry icon -->
                    <p>Docker Registries</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockerfile_list">
                    <i class="fas fa-file-code"></i> <!-- Code file icon for Dockerfile -->
                    <p>Dockerfile</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockerimg">
                    <i class="fas fa-images"></i> <!-- Images icon -->
                    <p>Docker Images</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockercontainers">
                    <i class="fas fa-box"></i> <!-- Box icon for containers -->
                    <p>Docker Containers</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/volumes">
                    <i class="fas fa-database"></i> <!-- Database icon for Volumes -->
                    <p>Volumes</p>
                  </a>
                </li>
                <li class="nav-item active">
                  <a href="/compose">
                    <i class="fas fa-cubes"></i> <!-- Stacked cubes for Compose -->
                    <p>Docker Compose</p>
                  </a>
                </li>
                <li class="nav-item">
                    <a href="swarm_list">
                        <i class="fas fa-project-diagram"></i> <!-- Stacked cubes for Compose -->
                      <p>Docker Swarm</p>
                    </a>
                  </li>
                  <li class="nav-item">
                    <a data-bs-toggle="collapse" href="#kubernetesMenu" aria-expanded="false">
                        <i class="fas fa-dharmachakra"></i>
                        <p>Kubernetes</p>
                        <span class="caret"></span>
                    </a>
                    <div class="collapse" id="kubernetesMenu">
                        <ul class="nav nav-collapse">
                            <li>
                                <a href="/kubernetes/cluster">
                                    <span class="sub-item">Cluster Setup</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/nodes">
                                    <span class="sub-item">Nodes</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/deployments">
                                    <span class="sub-item">Deployments</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/statefulsets">
                                    <span class="sub-item">StatefulSets</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/services">
                                    <span class="sub-item">Services</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/pods">
                                    <span class="sub-item">Pods</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/pvcs">
                                    <span class="sub-item">Storage</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/configs">
                                    <span class="sub-item">ConfigMaps && Secrets</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/namespaces">
                                    <span class="sub-item">Namespaces</span>
                                </a>
                            </li>
                             <li>
                <a href="/kubernetes/ingresses">
                    <span class="sub-item">Ingresses</span>
                </a>
            </li>
                        </ul>
                    </div>

                </li>
                <li class="nav-item">
                    <a href="/cicd_integration">
                      <i class="fas fa-sync-alt"></i>
                      <p>CI CD</p>
                    </a>
                  </li>
                <li class="nav-item">
                  <a data-bs-toggle="collapse" href="#" onclick="logout()">
                    <i class="fas fa-sign-out-alt"></i> <!-- Logout icon -->
                    <p>Logout</p>
                  </a>
                </li>
              </ul>
            </div>
          </div>
      </div>
      <!-- End Sidebar -->
      <div class="main-panel">
          <div class="main-header">
              <div class="main-header-logo">
                  <!-- Logo Header -->
                  <div class="logo-header" data-background-color="dark">
                      <a href="../index.html" class="logo">
                          <img src="../assets/img/dockube3.png" alt="navbar brand" class="navbar-brand" />
                      </a>
                      <div class="nav-toggle">
                          <button class="btn btn-toggle toggle-sidebar">
                              <i class="gg-menu-right"></i>
                          </button>
                          <button class="btn btn-toggle sidenav-toggler">
                              <i class="gg-menu-left"></i>
                          </button>
                      </div>
                      <button class="topbar-toggler more">
                          <i class="gg-more-vertical-alt"></i>
                      </button>
                  </div>
                  <!-- End Logo Header -->
              </div>
              <!-- Navbar Header -->
              <nav class="navbar navbar-header navbar-header-transparent navbar-expand-lg border-bottom">
                  <div class="container-fluid">
                      <nav class="navbar navbar-header-left navbar-expand-lg navbar-form nav-search p-0 d-none d-lg-flex">
                          
                      </nav>
                      <ul class="navbar-nav topbar-nav ms-md-auto align-items-center">
                          <li class="nav-item topbar-user dropdown hidden-caret">
                              <a class="dropdown-toggle profile-pic" data-bs-toggle="dropdown" href="/profile" aria-expanded="false">
                                  <span class="profile-username">
                                      <span class="op-7">Hi,</span>
                                      <span class="fw-bold">Hizrian</span>
                                  </span>
                              </a>
                              <ul class="dropdown-menu dropdown-user animated fadeIn">
                                  <div class="dropdown-user-scroll scrollbar-outer">
                                      <li>
                                          <div class="user-box">
                                              <div class="avatar-lg">
                                                  <img src="assets/img/profile.jpg" alt="image profile" class="avatar-img rounded" />
                                              </div>
                                              <div class="u-text">
                                                  <h4>Hizrian</h4>
                                                  <p class="text-muted">hello@example.com</p>
                                                  <a href="/profile" class="action-btn btn-blue1 btn-sm">Update Profile</a>
                                              </div>
                                          </div>
                                      </li>
                                      <li>
                                          <div class="dropdown-divider"></div>
                                          <a class="dropdown-item" href="#" onclick="logout()">Logout</a>
                                      </li>
                                  </div>
                              </ul>
                          </li>
                      </ul>
                  </div>
              </nav>
              <script>
                  document.addEventListener("DOMContentLoaded", function() {
                      var user = JSON.parse(localStorage.getItem("user"));
                      if (user) {
                          document.querySelector(".profile-username .fw-bold").textContent = user.username;
                          document.querySelector(".u-text h4").textContent = user.username;
                          document.querySelector(".u-text .text-muted").textContent = user.email;
                      }
                  });
              </script>
              <!-- End Navbar -->
          </div>
          <div class="container">
            <div class="page-inner">
                <div class="page-header">
                    <h2 class="my-4">Projects - Docker Compose Deployments
                        <span class="help-icon" data-tooltip="Running instances of your composed applications">
                          <i class="fas fa-info-circle"></i>
                        </span>
                      </h2>
                        </div>
                <div class="add-button">
                    <button class="action-btn btn-pastel-docker-blue" onclick="createNewService()">
                        <i class="fas fa-plus"></i> Create New Project
                        <span class="help-icon" data-tooltip="Start a new multi-container application">
                          <i class="fas fa-info-circle"></i>
                        </span>
                      </button>
                </div>
                <div class="input-group">
                    <input type="text" name="table_search" id="searchInput" onkeyup="filterServices()" class="form-control" placeholder="Search services...">
                </div>
                <div id="stacksContainer">
                    <!-- Stacks and services will be dynamically inserted here -->
                </div>
                <!-- Log Container -->
                
            </div>
          </div>
    <div class="modal fade" id="serviceModal" tabindex="-1" aria-labelledby="serviceModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
          <div class="modal-content">
              <div class="modal-header">
                  <h5 class="modal-title" id="serviceModalLabel">service Content</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                  <pre id="serviceContent"></pre>
              </div>
          </div>
      </div>
    </div>
    <!-- Terminal Modal -->
<!-- Terminal Modal -->
<div class="modal fade" id="terminalModal" tabindex="-1" aria-labelledby="terminalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="terminalModalLabel">Terminal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="terminal" style="height: 400px;"></div>
            </div>
        </div>
    </div>
</div>

<!-- Logs Modal -->
<div class="modal fade" id="logsModal" tabindex="-1" aria-labelledby="logsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="logsModalLabel">Logs</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <pre id="logsContent"></pre>
            </div>
        </div>
    </div>
</div>
    </div>
    <div id="chatbot-container">
        <!-- Chatbot Toggle Button (Circle with Logo) -->
        <div id="chatbot-toggle">
            <img src="../assets/img/dockube3.png" alt="Chatbot Logo" width="50" height="50">
        </div>
      
        <!-- Chatbot Interface (Hidden by Default) -->
       
      <div id="chatbot-interface" style="display: none;">
        <!-- Chat Header -->
        <div id="chat-header">
            <strong>
                <img src="../assets/img/dockube3.png" alt="Logo">
                Docker & Kubernetes Assistant
            </strong>
            <button id="chat-close">×</button>
        </div>
      
        <!-- Chat Body -->
        <div id="chat-body">
            <div id="chat-messages">
                <!-- Welcome Message -->
                <div class="welcome-message" onclick="toggleWelcomeMessage()">
                    👋 Welcome! I'm your Docker & Kubernetes Assistant.
                    Ask me anything about Docker, Kubernetes, and best practices.
                    <div class="hidden-content">
                        Hi! I'm your Docker & Kubernetes Assistant.  
                        Ask me anything about services, Kubernetes configurations, and best practices.
                    </div>
                </div>
            </div>
        </div>
      
        <!-- Chat Input -->
        <div id="chat-input">
            <input type="text" id="chat-message" placeholder="Type your question...">
            <button id="chat-send">Send</button>
        </div>
      </div>
      </div>
      <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatbotToggle = document.getElementById('chatbot-toggle');
            const chatbotInterface = document.getElementById('chatbot-interface');
            const chatClose = document.getElementById('chat-close');
            const chatBody = document.getElementById('chat-body');
            const chatMessages = document.getElementById('chat-messages');
            const chatMessageInput = document.getElementById('chat-message');
            const chatSendButton = document.getElementById('chat-send');
      
            // Toggle Chat Interface
            chatbotToggle.addEventListener('click', () => {
                chatbotInterface.style.display = 'block';
            });
      
            // Close Chat Interface
            chatClose.addEventListener('click', () => {
                chatbotInterface.style.display = 'none';
            });
      
            // Send Message to Chatbot
            chatSendButton.addEventListener('click', async () => {
                const message = chatMessageInput.value.trim();
                if (message) {
                    // Add User Message to Chat
                    chatMessages.innerHTML += `<div class="message"><strong>You:</strong> ${message}</div>`;
                    chatMessageInput.value = '';
      
                    // Show Loading Spinner
                    chatMessages.innerHTML += `<div id="loading-spinner">Loading...</div>`;
      
                    // Call Backend API
                    try {
                        const response = await fetch('/api/chat', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ message })
                        });
                        const data = await response.json();
      
                        // Remove Loading Spinner and Add Bot Response
                        document.getElementById('loading-spinner').remove();
                        chatMessages.innerHTML += `<div class="message"><strong>Assistant:</strong> ${data.response}</div>`;
                    } catch (error) {
                        console.error('Error:', error);
                        chatMessages.innerHTML += `<div class="message"><strong>Error:</strong> Failed to get response.</div>`;
                    }
      
                    // Scroll to Bottom of Chat
                    chatBody.scrollTop = chatBody.scrollHeight;
                }
            });
      
            // Allow Pressing "Enter" to Send a Message
            chatMessageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    chatSendButton.click();
                }
            });
        });
      </script>
      <script src="https://cdn.jsdelivr.net/npm/xterm@5.3.0/lib/xterm.min.js"></script>
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/xterm@5.3.0/css/xterm.min.css" />
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

      <script>
        function createNewService() {
              localStorage.removeItem('serviceId');
              window.location.href = '/service';
          }
          document.addEventListener('DOMContentLoaded', function () {
    fetchServices();
});

async function fetchServices() {
    try {
        const response = await fetch('/compose/services');
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const groupedServices = await response.json();
        console.log('Fetched services:', groupedServices); 

        const stacksContainer = document.getElementById('stacksContainer');
        stacksContainer.innerHTML = ''; 

        if (!groupedServices || Object.keys(groupedServices).length === 0) {
            console.log('No services found.'); 
            stacksContainer.innerHTML = '<p>No services found.</p>';
            return;
        }

        for (const [stack, services] of Object.entries(groupedServices)) {
            const stackSection = document.createElement('div');
            stackSection.className = 'stack-section';
            stackSection.innerHTML = `
                <div class="stack-header" onclick="toggleStack('${stack}')">
    <h3>[+] Project: ${stack}</h3>
    <div class="stack-actions action-buttons">
        <button class="action-btn btn-pastel-red" onclick="deleteStack('${stack}')"> <i class="fas fa-trash"></i> Delete Project</button>
        <button class="action-btn btn-pastel-docker-blue" onclick="updateStack('${stack}')"> <i class="fas fa-edit"></i> Update Project</button>
    </div>
</div>
                <div id="${stack}-services" class="services-list" style="display: none;">
                    <table class="services-table">
                        <thead>
                            <tr>
                                <th>Service Name</th>
                                <th>Status</th>
                                <th>Created At</th>
                                <th class="actions">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${services.map(service => `
                                <tr>
                                    <td>
                                        <span class="service-name" onclick="toggleService('${service.name}')">[+] ${service.name}</span>
                                    </td>
                                    <td>${service.status}</td>
                                    <td>${new Date(service.createdAt).toLocaleString()}</td>
                                    <td>
                                          <div class="action-buttons service-actions">
        <button class="action-btn btn-blue2" onclick="restartService('${service.name}')" data-tooltip="Restart service">
            <i class="fas fa-redo"></i> Restart
        </button>
        <button class="action-btn btn-pastel-docker-blue" onclick="stopService('${service.name}')" data-tooltip="Stop service">
            <i class="fas fa-stop"></i> Stop
        </button>
        <button class="action-btn btn-pastel-red" onclick="deleteService('${service.name}')" data-tooltip="Delete service">
            <i class="fas fa-trash"></i> Delete
        </button>
        <button class="action-btn btn-pastel-gray" onclick="viewServiceDetails('${service.name}')" data-tooltip="View details">
            <i class="fas fa-eye"></i> View
        </button>  
        <button class="action-btn btn-blue2" onclick="viewLogs('${service.name}')" data-tooltip="View logs">
            <i class="fas fa-file-alt"></i> Logs
        </button>   
    </div>
                                    </td>
                                </tr>
                                <tr id="${service.name}-containers-row" class="containers-row" style="display: none;">
                                    <td colspan="4">
                                        <div class="containers-list">
                                            <table class="containers-table">
                                                <thead>
                                                    <tr>
                                                        <th>Container Name</th>
                                                        <th>Status</th>
                                                        <th class="actions">Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <!-- Containers will be dynamically inserted here -->
                                                </tbody>
                                            </table>
                                        </div>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
            stacksContainer.appendChild(stackSection);
        }
    } catch (error) {
        console.error('Error fetching services:', error);
        const stacksContainer = document.getElementById('stacksContainer');
        stacksContainer.innerHTML = `<p>Error: ${error.message}</p>`;
    }
}
async function toggleService(serviceName) {
    const containersRow = document.getElementById(`${serviceName}-containers-row`);
    if (containersRow.style.display === 'none') {
        containersRow.style.display = 'table-row';
        await fetchContainers(serviceName);
    } else {
        containersRow.style.display = 'none';
    }
}

async function fetchContainers(serviceName) {
    try {
        const response = await fetch(`/compose/services/${serviceName}/containers`);
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const containers = await response.json();
        const containersTable = document.querySelector(`#${serviceName}-containers-row .containers-table tbody`);
        containersTable.innerHTML = containers.map(container => `
            <tr>
                <td>${container.name}</td>
                <td>${container.status}</td>
                <td>
                   <div class="action-buttons container-actions">
        <button class="action-btn btn-blue2" onclick="restartContainer('${container.id}')" data-tooltip="Restart container">
            <i class="fas fa-redo"></i> Restart
        </button>
        <button class="action-btn btn-pastel-docker-blue" onclick="stopContainer('${container.id}')" data-tooltip="Stop container">
            <i class="fas fa-stop"></i> Stop
        </button>
        <button class="action-btn btn-pastel-red" onclick="deleteContainer('${container.id}')" data-tooltip="Delete container">
            <i class="fas fa-trash"></i> Delete
        </button>
        <button class="action-btn btn-pastel-gray" onclick="openContainerTerminal('${container.id}')" data-tooltip="Open terminal">
            <i class="fas fa-terminal"></i> Terminal
        </button> 
        <button class="action-btn btn-blue2" onclick="viewContainerLogs('${container.id}')" data-tooltip="View logs">
            <i class="fas fa-file-alt"></i> Logs
        </button>
    </div>
                </td>
            </tr>
        `).join('');
    } catch (error) {
        console.error('Error fetching containers:', error);
    }
}

function toggleStack(stack) {
    const servicesList = document.getElementById(`${stack}-services`);
    if (servicesList.style.display === 'none') {
        servicesList.style.display = 'block';
    } else {
        servicesList.style.display = 'none';
    }
}
function toggleStack(stack) {
    const servicesList = document.getElementById(`${stack}-services`);
    if (servicesList.style.display === 'none') {
        servicesList.style.display = 'block';
    } else {
        servicesList.style.display = 'none';
    }
}
// Function to open a terminal for a container
async function openContainerTerminal(containerId) {
    try {
        const terminalElement = document.getElementById('terminal');
        terminalElement.innerHTML = ''; // Clear previous terminal

        const terminal = new Terminal();
        terminal.open(terminalElement);

        // Establish WebSocket connection
        const socket = new WebSocket(`ws://localhost:5000?containerId=${containerId}`);

        socket.addEventListener('open', () => {
            console.log(`WebSocket connection established for container ${containerId}`);
        });

        socket.addEventListener('message', (event) => {
            terminal.write(event.data);
        });

        socket.addEventListener('close', () => {
            console.log(`WebSocket connection closed for container ${containerId}`);
            terminal.write('\nConnection closed.\n');
        });

        socket.addEventListener('error', (error) => {
            console.error(`WebSocket error for container ${containerId}:`, error);
            terminal.write(`\nWebSocket error: ${error.message}\n`);
        });

        // Send data to the container
        terminal.onData((data) => {
            socket.send(data);
        });

        // Handle terminal resize
        terminal.onResize(({ cols, rows }) => {
            socket.send(JSON.stringify({ type: 'resize', cols, rows }));
        });

        // Show the terminal modal
        $('#terminalModal').modal('show');
    } catch (error) {
        console.error('Error opening terminal:', error);
        Swal.fire('Error!', 'Failed to open terminal.', 'error');
    }
}


async function viewLogs(serviceName) {
    try {
        const response = await fetch(`/compose/services/${serviceName}/logs`);
        if (!response.ok) {
            throw new Error(`Failed to fetch logs for service ${serviceName}`);
        }
        const data = await response.json();

        // Display logs in the modal with proper formatting
        const logsContent = document.getElementById('logsContent');
        logsContent.innerHTML = data.logs.replace(/\n/g, '<br>');
        $('#logsModal').modal('show');
    } catch (error) {
        console.error('Error viewing logs:', error);
        Swal.fire('Error!', error.message, 'error');
    }
}

async function viewContainerLogs(containerId) {
    try {
        const response = await fetch(`/compose/containers/${containerId}/logs`);
        if (!response.ok) {
            throw new Error(`Failed to fetch logs for container ${containerId}`);
        }
        const data = await response.json();

        const logsContent = document.getElementById('logsContent');
        logsContent.innerHTML = data.logs.replace(/\n/g, '<br>');
        $('#logsModal').modal('show');
    } catch (error) {
        console.error('Error viewing container logs:', error);
        Swal.fire('Error!', error.message, 'error');
    }
}  
async function startService(serviceName) {
    try {
        const response = await fetch(`/compose/services/${serviceName}/start`, { method: 'POST' });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to start service.');
        }
        const data = await response.json();
        Swal.fire('Success!', data.message, 'success');
        fetchServices(); 
    } catch (error) {
        console.error('Error starting service:', error);
        Swal.fire('Error!', error.message, 'error');
    }
}

async function stopService(serviceName) {
    try {
        const response = await fetch(`/compose/services/${serviceName}/stop`, { method: 'POST' });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to stop service.');
        }
        const data = await response.json();
        Swal.fire('Success!', data.message, 'success');
        fetchServices(); 
    } catch (error) {
        console.error('Error stopping service:', error);
        Swal.fire('Error!', error.message, 'error');
    }
}

async function restartService(serviceName) {
    try {
        const response = await fetch(`/compose/services/${serviceName}/restart`, { method: 'POST' });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to restart service.');
        }
        const data = await response.json();
        Swal.fire('Success!', data.message, 'success');
        fetchServices(); // Refresh the list
    } catch (error) {
        console.error('Error restarting service:', error);
        Swal.fire('Error!', error.message, 'error');
    }
}
// Delete Stack
async function deleteStack(stackName) {
    const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'This will delete the project and all its services!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel',
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch(`/compose/stacks/${stackName}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to delete project.');
            }
            const data = await response.json();
            Swal.fire('Deleted!', data.message, 'success');
            fetchServices(); // Refresh the list
        } catch (error) {
            console.error('Error deleting project:', error);
            Swal.fire('Error!', error.message, 'error');
        }
    }
}

// Update Stack
async function updateStack(stackName) {
    try {
        // Fetch the existing stack's YAML content
        const response = await fetch(`/compose/stacks/${stackName}`);
        if (!response.ok) {
            throw new Error(`Failed to fetch project ${stackName}`);
        }
        const stack = await response.json();

        // Store the stack name and YAML content in localStorage
        localStorage.setItem('updateStackName', stackName);
        localStorage.setItem('updateStackYaml', stack.yamlContent);

        // Set a flag to indicate this is an update operation
        localStorage.setItem('isUpdate', 'true');

        // Redirect to the compose creation page
        window.location.href = '/service'; 
    } catch (error) {
        console.error('Error fetching stack:', error);
        Swal.fire('Error!', error.message, 'error');
    }
}
// Delete Service
async function deleteService(serviceName) {
    const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'This will delete the service and all its containers!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel',
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch(`/compose/services/${serviceName}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to delete service.');
            }
            const data = await response.json();
            Swal.fire('Deleted!', data.message, 'success');
            fetchServices(); 
        } catch (error) {
            console.error('Error deleting service:', error);
            Swal.fire('Error!', error.message, 'error');
        }
    }
}

// View Service Details
async function viewServiceDetails(serviceName) {
    try {
        const response = await fetch(`/compose/services/${serviceName}/details`);
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to fetch service details.');
        }
        const data = await response.json();

        // Display details in a modal
        Swal.fire({
            title: `Details - ${serviceName}`,
            html: `<pre>${data.details}</pre>`,
            showCancelButton: false,
            showConfirmButton: false,
            width: '80%',
        });
    } catch (error) {
        console.error('Error viewing service details:', error);
        Swal.fire('Error!', error.message, 'error');
    }
}

// Restart Container
async function restartContainer(containerId) {
    try {
        const response = await fetch(`/compose/containers/${containerId}/restart`, { method: 'POST' });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to restart container.');
        }
        const data = await response.json();
        Swal.fire('Restarted!', data.message, 'success');
        fetchServices(); 
    } catch (error) {
        console.error('Error restarting container:', error);
        Swal.fire('Error!', error.message, 'error');
    }
}

// Stop Container
async function stopContainer(containerId) {
    try {
        const response = await fetch(`/compose/containers/${containerId}/stop`, { method: 'POST' });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to stop container.');
        }
        const data = await response.json();
        Swal.fire('Stopped!', data.message, 'success');
        fetchServices(); 
    } catch (error) {
        console.error('Error stopping container:', error);
        Swal.fire('Error!', error.message, 'error');
    }
}

// Delete Container
async function deleteContainer(containerId) {
    const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'This will delete the container!',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel',
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch(`/compose/containers/${containerId}`, { method: 'DELETE' });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to delete container.');
            }
            const data = await response.json();
            Swal.fire('Deleted!', data.message, 'success');
            fetchServices(); // Refresh the list
        } catch (error) {
            console.error('Error deleting container:', error);
            Swal.fire('Error!', error.message, 'error');
        }
    }
}

      </script>

    <!--   Core JS Files   -->
    <script src="../assets/js/core/jquery-3.7.1.min.js"></script>
    <script src="../assets/js/core/popper.min.js"></script>
    <script src="../assets/js/core/bootstrap.min.js"></script>

    <!-- jQuery Scrollbar -->
    <script src="../assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js"></script>

    <!-- Chart JS -->
    <script src="../assets/js/plugin/chart.js/chart.min.js"></script>

    <!-- jQuery Sparkline -->
    <script src="../assets/js/plugin/jquery.sparkline/jquery.sparkline.min.js"></script>

    <!-- Chart Circle -->
    <script src="../assets/js/plugin/chart-circle/circles.min.js"></script>

    <!-- Datatables -->
    <script src="../assets/js/plugin/datatables/datatables.min.js"></script>

    <!-- Bootstrap Notify -->
    <script src="../assets/js/plugin/bootstrap-notify/bootstrap-notify.min.js"></script>

    <!-- jQuery Vector Maps -->
    <script src="../assets/js/plugin/jsvectormap/jsvectormap.min.js"></script>
    <script src="../assets/js/plugin/jsvectormap/world.js"></script>

    <!-- Google Maps Plugin -->
    <script src="../assets/js/plugin/gmaps/gmaps.js"></script>

    <!-- Sweet Alert -->
    <script src="../assets/js/plugin/sweetalert/sweetalert.min.js"></script>

    <!-- Kaiadmin JS -->
    <script src="../assets/js/kaiadmin.min.js"></script>

    <!-- Kaiadmin DEMO methods, don't include it in your project! -->
    <script src="../assets/js/setting-demo2.js"></script>
	<script src="/assets/js/script.js"></script>
  <script>
    function logout() {
            Swal.fire({
                title: 'Logout Confirmation',
                text: 'Are you sure you want to log out?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#326ce5',
                cancelButtonColor: '#ff6666',
                confirmButtonText: 'Yes, log out'
            }).then((result) => {
                if (result.isConfirmed) {
                    localStorage.clear();
                    window.location.replace("/login");
                }
            });
        }
  </script>
<script>
  function recherche() {
    var input, filter, items, item, name, i, txtValue;
    input = document.getElementById("searchInput"); 
    filter = input.value.toUpperCase();
    items = document.getElementsByClassName("service-item"); // Target list items

    for (i = 0; i < items.length; i++) {
        item = items[i];
        name = item.querySelector(".service-name"); // Target the service name
        if (name) {
            txtValue = name.textContent || name.innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                item.style.display = "flex"; 
            } else {
                item.style.display = "none"; // Hide the item
            }
        }
    }
  }
</script>
</body>

</html>
