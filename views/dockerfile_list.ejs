<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>DockerFile</title>
    <meta content="width=device-width, initial-scale=1.0, shrink-to-fit=no" name="viewport" />
    <link rel="icon" href="../assets/img/dockube3.png" type="image/x-icon" />
    <!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.27/dist/sweetalert2.min.css">
<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.4.27/dist/sweetalert2.all.min.js"></script>
<link rel="stylesheet" href="../assets/css/dockerfile_list.css">

    <!-- Fonts and icons -->
    <script src="../assets/js/plugin/webfont/webfont.min.js"></script>
    <script>
      WebFont.load({
        google: { families: ["Public Sans:300,400,500,600,700"] },
        custom: {
          families: [
            "Font Awesome 5 Solid",
            "Font Awesome 5 Regular",
            "Font Awesome 5 Brands",
            "simple-line-icons",
          ],
          urls: ["../assets/css/fonts.min.css"],
        },
        active: function () {
          sessionStorage.fonts = true;
        },
      });
    </script>
    <!-- CSS Files -->
    <link rel="stylesheet" href="../assets/css/bootstrap.min.css" />
    <link rel="stylesheet" href="../assets/css/plugins.min.css" />
    <link rel="stylesheet" href="../assets/css/kaiadmin.min.css" />
    <!-- CSS Just for demo purpose, don't include it in your project -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

    <link rel="stylesheet" href="../assets/css/demo.css" />
  </head>
  <body>
    <div class="wrapper">
      <!-- Sidebar -->
      <div class="sidebar" data-background-color="dark">
          <div class="sidebar-logo">
              <!-- Logo Header -->
              <div class="logo-header" data-background-color="dark">
                  <a href="/" class="logo" style="display: flex; align-items: center;">
                      <img src="assets/img/dockube3.png" alt="navbar brand" class="navbar-brand" height="40" />
                      <span style="margin-left: 8px; font-size: 1.2em; font-weight: bold; color: aliceblue;">Dockube Pilot</span>
                  </a>
                  <div class="nav-toggle">
                      <button class="btn btn-toggle toggle-sidebar">
                          <i class="gg-menu-right"></i>
                      </button>
                      <button class="btn btn-toggle sidenav-toggler">
                          <i class="gg-menu-left"></i>
                      </button>
                  </div>
                  <button class="topbar-toggler more">
                      <i class="gg-more-vertical-alt"></i>
                  </button>
              </div>
              <!-- End Logo Header -->
          </div>
          <div class="sidebar-wrapper scrollbar scrollbar-inner">
            <div class="sidebar-content">
              <ul class="nav nav-secondary">
                <li class="nav-item">
                  <a href="/" aria-expanded="false">
                    <i class="fas fa-tachometer-alt"></i> <!-- Dashboard icon -->
                    <p>Dashboard</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockerRegistries">
                    <i class="fas fa-warehouse"></i> <!-- Registry icon -->
                    <p>Docker Registries</p>
                  </a>
                </li>
                <li class="nav-item active">
                  <a href="/dockerfile_list">
                    <i class="fas fa-file-code"></i> <!-- Code file icon for Dockerfile -->
                    <p>Dockerfile</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockerimg">
                    <i class="fas fa-images"></i> <!-- Images icon -->
                    <p>Docker Images</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/dockercontainers">
                    <i class="fas fa-box"></i> <!-- Box icon for containers -->
                    <p>Docker Containers</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/volumes">
                    <i class="fas fa-database"></i> <!-- Database icon for Volumes -->
                    <p>Volumes</p>
                  </a>
                </li>
                <li class="nav-item">
                  <a href="/compose">
                    <i class="fas fa-cubes"></i> <!-- Stacked cubes for Compose -->
                    <p>Docker Compose</p>
                  </a>
                </li>
                <li class="nav-item">
                    <a href="swarm_list">
                        <i class="fas fa-project-diagram"></i> <!-- Stacked cubes for Compose -->
                      <p>Docker Swarm</p>
                    </a>
                  </li>

                  <li class="nav-item">
                    <a data-bs-toggle="collapse" href="#kubernetesMenu" aria-expanded="false">
                        <i class="fas fa-dharmachakra"></i>
                        <p>Kubernetes</p>
                        <span class="caret"></span>
                    </a>
                    <div class="collapse" id="kubernetesMenu">
                        <ul class="nav nav-collapse">
                            <li>
                                <a href="/kubernetes/cluster">
                                    <span class="sub-item">Cluster Setup</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/nodes">
                                    <span class="sub-item">Nodes</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/deployments">
                                    <span class="sub-item">Deployments</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/statefulsets">
                                    <span class="sub-item">StatefulSets</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/services">
                                    <span class="sub-item">Services</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/pods">
                                    <span class="sub-item">Pods</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/pvcs">
                                    <span class="sub-item">Storage</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/configs">
                                    <span class="sub-item">ConfigMaps && Secrets</span>
                                </a>
                            </li>
                            <li>
                                <a href="/kubernetes/namespaces">
                                    <span class="sub-item">Namespaces</span>
                                </a>
                            </li>
                             <li>
                <a href="/kubernetes/ingresses">
                    <span class="sub-item">Ingresses</span>
                </a>
            </li>
                        </ul>
                    </div>
                </li>
                <li class="nav-item">
                    <a href="/cicd_integration">
                      <i class="fas fa-sync-alt"></i>
                      <p>CI CD</p>
                    </a>
                  </li>
                <li class="nav-item">
                  <a data-bs-toggle="collapse" href="#" onclick="logout()">
                    <i class="fas fa-sign-out-alt"></i> <!-- Logout icon -->
                    <p>Logout</p>
                  </a>
                </li>
              </ul>
            </div>
          </div>
      </div>
      <!-- End Sidebar -->
      <div class="main-panel">
          <div class="main-header">
              <div class="main-header-logo">
                  <!-- Logo Header -->
                  <div class="logo-header" data-background-color="dark">
                      <a href="../index.html" class="logo">
                          <img src="../assets/img/dockube3.png" alt="navbar brand" class="navbar-brand" />
                      </a>
                      <div class="nav-toggle">
                          <button class="btn btn-toggle toggle-sidebar">
                              <i class="gg-menu-right"></i>
                          </button>
                          <button class="btn btn-toggle sidenav-toggler">
                              <i class="gg-menu-left"></i>
                          </button>
                      </div>
                      <button class="topbar-toggler more">
                          <i class="gg-more-vertical-alt"></i>
                      </button>
                  </div>
                  <!-- End Logo Header -->
              </div>
              <!-- Navbar Header -->
              <nav class="navbar navbar-header navbar-header-transparent navbar-expand-lg border-bottom">
                  <div class="container-fluid">
                      <nav class="navbar navbar-header-left navbar-expand-lg navbar-form nav-search p-0 d-none d-lg-flex">
                          
                      </nav>
                      <ul class="navbar-nav topbar-nav ms-md-auto align-items-center">
                          <li class="nav-item topbar-user dropdown hidden-caret">
                              <a class="dropdown-toggle profile-pic" data-bs-toggle="dropdown" href="/profile" aria-expanded="false">
                                  <span class="profile-username">
                                      <span class="op-7">Hi,</span>
                                      <span class="fw-bold">Hizrian</span>
                                  </span>
                              </a>
                              <ul class="dropdown-menu dropdown-user animated fadeIn">
                                  <div class="dropdown-user-scroll scrollbar-outer">
                                      <li>
                                          <div class="user-box">
                                              <div class="avatar-lg">
                                                  <img src="assets/img/profile.jpg" alt="image profile" class="avatar-img rounded" />
                                              </div>
                                              <div class="u-text">
                                                  <h4>Hizrian</h4>
                                                  <p class="text-muted">hello@example.com</p>
                                                  <a href="/profile" class="action-btn btn-blue1 btn-sm">Update Profile</a>
                                              </div>
                                          </div>
                                      </li>
                                      <li>
                                          <div class="dropdown-divider"></div>
                                          <a class="dropdown-item" href="#" onclick="logout()">Logout</a>
                                      </li>
                                  </div>
                              </ul>
                          </li>
                      </ul>
                  </div>
              </nav>
              <script>
                  document.addEventListener("DOMContentLoaded", function() {
                      var user = JSON.parse(localStorage.getItem("user"));
                      if (user) {
                          document.querySelector(".profile-username .fw-bold").textContent = user.username;
                          document.querySelector(".u-text h4").textContent = user.username;
                          document.querySelector(".u-text .text-muted").textContent = user.email;
                      }
                  });
              </script>
              <!-- End Navbar -->
          </div>
<div class="container">
  <div class="page-inner">
      <div class="page-header">
        <h2 class="text-center">DockerFiles
            <span class="help-icon" data-tooltip="Text documents containing build instructions for images">
              <i class="fas fa-info-circle"></i>
            </span>
          </h2>
      </div>
      <div class="add-button">
          <button class="action-btn btn-blue1" onclick="createNewDockerfile()">
              <i class="fas fa-plus"></i> Create New Dockerfile
          </button>
      </div>
      <div class="input-group">
        <div class="input-group-prepend">
            <button type="submit" onclick="recherche()" class="btn btn-search pe-1">
            </button>

        </div>
        <input type="text" name="table_search" id="searchInput" onkeyup="filterDockerfiles()" class="form-control" placeholder="Search Dockerfiles...">

    </div>
          <ul class="dockerfile-list" id="dockerfiles-container"></ul>
  </div>
</div>
    <div class="modal fade" id="dockerfileModal" tabindex="-1" aria-labelledby="dockerfileModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
          <div class="modal-content">
              <div class="modal-header">
                  <h5 class="modal-title" id="dockerfileModalLabel">Dockerfile Content</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                  <pre id="dockerfileContent"></pre>
              </div>
          </div>
      </div>
    </div>
    </div>
    <div id="chatbot-container">
        <!-- Chatbot Toggle Button (Circle with Logo) -->
        <div id="chatbot-toggle">
            <img src="../assets/img/dockube3.png" alt="Chatbot Logo" width="50" height="50">
        </div>
      
        <!-- Chatbot Interface (Hidden by Default) -->
       
      <div id="chatbot-interface" style="display: none;">
        <!-- Chat Header -->
        <div id="chat-header">
            <strong>
                <img src="../assets/img/dockube3.png" alt="Logo">
                Docker & Kubernetes Assistant
            </strong>
            <button id="chat-close">×</button>
        </div>
      
        <!-- Chat Body -->
        <div id="chat-body">
            <div id="chat-messages">
                <!-- Welcome Message -->
                <div class="welcome-message" onclick="toggleWelcomeMessage()">
                    👋 Welcome! I'm your Docker & Kubernetes Assistant.
                    Ask me anything about Docker, Kubernetes, and best practices.
                    <div class="hidden-content">
                        Hi! I'm your Docker & Kubernetes Assistant.  
                        Ask me anything about Dockerfiles, Kubernetes configurations, and best practices.
                    </div>
                </div>
            </div>
        </div>
      
        <!-- Chat Input -->
        <div id="chat-input">
            <input type="text" id="chat-message" placeholder="Type your question...">
            <button id="chat-send">Send</button>
        </div>
      </div>
      </div>
      </div>
      <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatbotToggle = document.getElementById('chatbot-toggle');
            const chatbotInterface = document.getElementById('chatbot-interface');
            const chatClose = document.getElementById('chat-close');
            const chatBody = document.getElementById('chat-body');
            const chatMessages = document.getElementById('chat-messages');
            const chatMessageInput = document.getElementById('chat-message');
            const chatSendButton = document.getElementById('chat-send');
      
            // Toggle Chat Interface
            chatbotToggle.addEventListener('click', () => {
                chatbotInterface.style.display = 'block';
            });
      
            // Close Chat Interface
            chatClose.addEventListener('click', () => {
                chatbotInterface.style.display = 'none';
            });
      
            // Send Message to Chatbot
            chatSendButton.addEventListener('click', async () => {
                const message = chatMessageInput.value.trim();
                if (message) {
                    // Add User Message to Chat
                    chatMessages.innerHTML += `<div class="message"><strong>You:</strong> ${message}</div>`;
                    chatMessageInput.value = '';
      
                    // Show Loading Spinner
                    chatMessages.innerHTML += `<div id="loading-spinner">Loading...</div>`;
      
                    // Call Backend API
                    try {
                        const response = await fetch('/api/chat', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ message })
                        });
                        const data = await response.json();
      
                        // Remove Loading Spinner and Add Bot Response
                        document.getElementById('loading-spinner').remove();
                        chatMessages.innerHTML += `<div class="message"><strong>Assistant:</strong> ${data.response}</div>`;
                    } catch (error) {
                        console.error('Error:', error);
                        chatMessages.innerHTML += `<div class="message"><strong>Error:</strong> Failed to get response.</div>`;
                    }
      
                    // Scroll to Bottom of Chat
                    chatBody.scrollTop = chatBody.scrollHeight;
                }
            });
      
            // Allow Pressing "Enter" to Send a Message
            chatMessageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    chatSendButton.click();
                }
            });
        });
      </script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

      <script>
          const apiUrl = 'http://localhost:5000/dockerfilees';
  
          function loadDockerfiles() {
            fetch(apiUrl)
    .then(response => response.json())
    .then(data => {
        const container = document.getElementById('dockerfiles-container');
        container.innerHTML = ''; 

        data.forEach((dockerfile) => {
                        const dockerfileItem = document.createElement('li');
                        dockerfileItem.className = `dockerfile-item ${dockerfile.status === 'invalid' ? 'invalid' : ''}`;                        dockerfileItem.innerHTML = `
                            <div class="dockerfile-info">
                                <div class="dockerfile-name">${dockerfile.name || 'Unnamed Dockerfile'}</div>
                                <div class="dockerfile-date">Created: ${new Date(dockerfile.dateOfCreation).toLocaleDateString()}</div>
                        ${dockerfile.status === 'invalid' ? `<div class="dockerfile-errors">Errors: ${dockerfile.errors.join(', ')}</div>` : ''}
                    </div>
        <td class="actions">
                            </div>
                             <div class="action-buttons dockerfile-actions">
        <button class="action-btn btn-pastel-gray" onclick="viewDockerfile('${dockerfile._id}')" data-tooltip="View Dockerfile">
            <i class="fas fa-eye"></i> View
        </button>
        <button class="action-btn btn-blue1" onclick="updateDockerfile('${dockerfile._id}')" data-tooltip="Update Dockerfile">
            <i class="fas fa-edit"></i> Update
        </button>
        <button class="action-btn btn-blue2" onclick="buildDockerfile('${dockerfile._id}')" data-tooltip="Build image">
            <i class="fas fa-cogs"></i> Build
        </button>
        <button class="action-btn btn-pastel-red" onclick="deleteDockerfile('${dockerfile._id}')" data-tooltip="Delete Dockerfile">
            <i class="fas fa-trash"></i> Delete
        </button>
    </div>
                        `;
                        container.appendChild(dockerfileItem);
                    });
                })
                .catch(error => console.error('Error fetching Dockerfiles:', error));
        }

        function filterDockerfiles() {
            const input = document.getElementById('searchInput').value.toUpperCase();
            const items = document.querySelectorAll('.dockerfile-item');

            items.forEach(item => {
                const name = item.querySelector('.dockerfile-name').textContent.toUpperCase();
                if (name.includes(input)) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        }
 // Function to delete a Dockerfile
window.deleteDockerfile = async function(dockerfileId) {
    try {
        const response = await fetch(`/dockerfilees/${dockerfileId}`, { method: 'DELETE' });
        
        if (response.ok) {
            Swal.fire('Deleted!', 'Dockerfile deleted successfully.', 'success').then(() => {
                location.reload(); 
            });
        } else {
            const errorMessage = await getErrorMessage(response);
            Swal.fire('Error!', errorMessage, 'error');
        }
    } catch (error) {
        console.error('Error deleting Dockerfile:', error);
        Swal.fire('Error!', 'Error deleting Dockerfile. Check the console for details.', 'error');
    }
};

// Helper function to parse error messages
async function getErrorMessage(response) {
    try {
        const errorData = await response.json();
        return errorData.message || 'Unknown error occurred';
    } catch (e) {
        return await response.text();
    }
}


          // Redirect to the Dockerfile generation page to update the Dockerfile
          function updateDockerfile(dockerfileId) {
              localStorage.setItem('dockerfileId', dockerfileId);
              window.location.href = '/dockerfile';
          }



function buildDockerfile(dockerfileId) {
    
    // Show build form
    Swal.fire({
        title: 'Build Docker Image',
        html: `
            <input id="imageName" class="swal2-input" placeholder="Image name (e.g., myapp)">
            <input id="imageTag" class="swal2-input" placeholder="Tag (e.g., latest)">
            <div class="form-check mt-2">
                <input class="form-check-input" type="checkbox" id="includeAllFiles">
                <label class="form-check-label" for="includeAllFiles">
                    Include all uploaded files in build context
                </label>
            </div>
        `,
        focusConfirm: false,
        preConfirm: () => {
            return {
                imageName: document.getElementById('imageName').value,
                tag: document.getElementById('imageTag').value,
                includeAllFiles: document.getElementById('includeAllFiles').checked
            };
        }
    }).then((result) => {
        if (result.isConfirmed) {
            const { imageName, tag, includeAllFiles } = result.value;
            
            if (!imageName) {
                Swal.showValidationMessage('Image name is required');
                return;
            }

            // Show loading state
            Swal.fire({
                title: 'Building Image',
                html: 'Please wait while we build your Docker image...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // Call build endpoint
            fetch('/dockerfilees/build', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    dockerfileId: dockerfileId,
                    imageName: `${imageName}:${tag || 'latest'}`,
                    includeAllFiles: includeAllFiles
                })
            })
            .then(response => response.json())
            .then(data => {
                Swal.close();
                if (data.type === 'success') {
                    Swal.fire('Success!', data.message, 'success');
                } else {
                    // Show detailed error with suggestions
                    let errorHtml = `<p>${data.message}</p>`;
                    if (data.errors && data.errors.length) {
                        errorHtml += `<ul>${data.errors.map(e => `<li>${e}</li>`).join('')}</ul>`;
                    }
                    if (data.suggestions && data.suggestions.length) {
                        errorHtml += `<p><strong>Suggestions:</strong></p>
                                      <ul>${data.suggestions.map(s => `<li>${s}</li>`).join('')}</ul>`;
                    }
                    Swal.fire({
                        title: 'Build Failed',
                        html: errorHtml,
                        icon: 'error'
                    });
                }
            })
            .catch(error => {
                Swal.fire('Error!', 'Failed to build image: ' + error.message, 'error');
            });
        }
    });
}   

// Create a new Dockerfile
          function createNewDockerfile() {
              localStorage.removeItem('dockerfileId');
              window.location.href = '/dockerfile';
          }
  

          function viewDockerfile(dockerfileId) {
    fetch(`/dockerfilees/${dockerfileId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(dockerfile => {
            // Determine the content to display
            let contentToDisplay = dockerfile.content || dockerfile.lines.join('\n');

            Swal.fire({
                title: dockerfile.name || 'Dockerfile Content',
                html: `<pre style="text-align: left; white-space: pre-wrap;">${contentToDisplay}</pre>`,
                icon: 'info',
                showCloseButton: true,
                showCancelButton: false,
                confirmButtonText: 'Close'
            });
        })
        .catch(error => {
            console.error('Error fetching Dockerfile content:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Failed to fetch Dockerfile content. Please try again later.',
                icon: 'error',
                confirmButtonText: 'Close'
            });
        });
}


          window.onload = loadDockerfiles;


      </script>

    <!--   Core JS Files   -->
    <script src="../assets/js/core/jquery-3.7.1.min.js"></script>
    <script src="../assets/js/core/popper.min.js"></script>
    <script src="../assets/js/core/bootstrap.min.js"></script>

    <!-- jQuery Scrollbar -->
    <script src="../assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js"></script>

    <!-- Chart JS -->
    <script src="../assets/js/plugin/chart.js/chart.min.js"></script>

    <!-- jQuery Sparkline -->
    <script src="../assets/js/plugin/jquery.sparkline/jquery.sparkline.min.js"></script>

    <!-- Chart Circle -->
    <script src="../assets/js/plugin/chart-circle/circles.min.js"></script>

    <!-- Datatables -->
    <script src="../assets/js/plugin/datatables/datatables.min.js"></script>

    <!-- Bootstrap Notify -->
    <script src="../assets/js/plugin/bootstrap-notify/bootstrap-notify.min.js"></script>

    <!-- jQuery Vector Maps -->
    <script src="../assets/js/plugin/jsvectormap/jsvectormap.min.js"></script>
    <script src="../assets/js/plugin/jsvectormap/world.js"></script>

    <!-- Google Maps Plugin -->
    <script src="../assets/js/plugin/gmaps/gmaps.js"></script>

    <!-- Sweet Alert -->
    <script src="../assets/js/plugin/sweetalert/sweetalert.min.js"></script>

    <!-- Kaiadmin JS -->
    <script src="../assets/js/kaiadmin.min.js"></script>

    <!-- Kaiadmin DEMO methods, don't include it in your project! -->
    <script src="../assets/js/setting-demo2.js"></script>
	<script src="/assets/js/script.js"></script>
  <script>
    function logout() {
            Swal.fire({
                title: 'Logout Confirmation',
                text: 'Are you sure you want to log out?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#326ce5',
                cancelButtonColor: '#ff6666',
                confirmButtonText: 'Yes, log out'
            }).then((result) => {
                if (result.isConfirmed) {
                    localStorage.clear();
                    window.location.replace("/login");
                }
            });
        }
  </script>
<script>
  function recherche() {
    var input, filter, items, item, name, i, txtValue;
    input = document.getElementById("searchInput"); 
    filter = input.value.toUpperCase();
    items = document.getElementsByClassName("dockerfile-item"); // Target list items

    for (i = 0; i < items.length; i++) {
        item = items[i];
        name = item.querySelector(".dockerfile-name"); // Target the Dockerfile name
        if (name) {
            txtValue = name.textContent || name.innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                item.style.display = "flex"; 
            } else {
                item.style.display = "none"; // Hide the item
            }
        }
    }
  }
</script>
</body>

</html>
